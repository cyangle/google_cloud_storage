#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/notification"
require "../models/notifications"

module GoogleCloudStorage
  class NotificationsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Permanently deletes a notification subscription.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @required @param notification [String?] ID of the notification to delete.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Nil]
    def delete(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Nil
      delete_with_http_info(bucket: bucket, notification: notification, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      nil
    end

    # Permanently deletes a notification subscription.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @required @param notification [String?] ID of the notification to delete.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_with_http_info(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete(bucket: bucket, notification: notification, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: NotificationsApi#delete\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Permanently deletes a notification subscription.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @required @param notification [String?] ID of the notification to delete.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def delete(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete(bucket: bucket, notification: notification, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_NOTIFICATIONS_DELETE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_delete(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: NotificationsApi.delete ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?
        unless (_bucket = bucket).nil?
        end
        raise ArgumentError.new("\"notification\" is required and cannot be null") if notification.nil?
        unless (_notification = notification).nil?
        end
        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_NOTIFICATIONS_DELETE_VALID_VALUES_FOR_ALT)
        end
        unless (_fields = fields).nil?
        end
        unless (_key = key).nil?
        end
        unless (_oauth_token = oauth_token).nil?
        end
        unless (_pretty_print = pretty_print).nil?
        end
        unless (_quota_user = quota_user).nil?
        end
        unless (_upload_type = upload_type).nil?
        end
        unless (_user_ip = user_ip).nil?
        end
        unless (_user_project = user_project).nil?
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/notificationConfigs/{notification}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s)).sub("{" + "notification" + "}", URI.encode_path(notification.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "NotificationsApi.storage_notifications_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # View a notification configuration.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @required @param notification [String?] Notification ID
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::Notification]
    def get(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::Notification
      data, _status_code, _headers = get_with_http_info(bucket: bucket, notification: notification, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # View a notification configuration.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @required @param notification [String?] Notification ID
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::Notification, Integer, Hash)] GoogleCloudStorage::Notification, response status code and response headers
    def get_with_http_info(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::Notification, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get(bucket: bucket, notification: notification, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: NotificationsApi#get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Notification.from_json(body), status_code, headers)
    end

    # View a notification configuration.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @required @param notification [String?] Notification ID
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def get(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get(bucket: bucket, notification: notification, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_NOTIFICATIONS_GET_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_get(
      *,
      bucket : String? = nil,
      notification : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: NotificationsApi.get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?
        unless (_bucket = bucket).nil?
        end
        raise ArgumentError.new("\"notification\" is required and cannot be null") if notification.nil?
        unless (_notification = notification).nil?
        end
        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_NOTIFICATIONS_GET_VALID_VALUES_FOR_ALT)
        end
        unless (_fields = fields).nil?
        end
        unless (_key = key).nil?
        end
        unless (_oauth_token = oauth_token).nil?
        end
        unless (_pretty_print = pretty_print).nil?
        end
        unless (_quota_user = quota_user).nil?
        end
        unless (_upload_type = upload_type).nil?
        end
        unless (_user_ip = user_ip).nil?
        end
        unless (_user_project = user_project).nil?
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/notificationConfigs/{notification}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s)).sub("{" + "notification" + "}", URI.encode_path(notification.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "NotificationsApi.storage_notifications_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Creates a notification subscription for a given bucket.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param notification [GoogleCloudStorage::Notification?]
    # @return [GoogleCloudStorage::Notification]
    def insert(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      notification : GoogleCloudStorage::Notification? = nil
    ) : GoogleCloudStorage::Notification
      data, _status_code, _headers = insert_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, notification: notification)
      data
    end

    # Creates a notification subscription for a given bucket.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param notification [GoogleCloudStorage::Notification?]
    # @return [Tuple(GoogleCloudStorage::Notification, Integer, Hash)] GoogleCloudStorage::Notification, response status code and response headers
    def insert_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      notification : GoogleCloudStorage::Notification? = nil
    ) : Tuple(GoogleCloudStorage::Notification, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_insert(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, notification: notification)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: NotificationsApi#insert\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Notification.from_json(body), status_code, headers)
    end

    # Creates a notification subscription for a given bucket.
    # @required @param bucket [String?] The parent bucket of the notification.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param notification [GoogleCloudStorage::Notification?]
    # @return nil
    def insert(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      notification : GoogleCloudStorage::Notification? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_insert(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, notification: notification).execute(&block)
    end

    STORAGE_NOTIFICATIONS_INSERT_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_insert(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      notification : GoogleCloudStorage::Notification? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: NotificationsApi.insert ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?
        unless (_bucket = bucket).nil?
        end
        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_NOTIFICATIONS_INSERT_VALID_VALUES_FOR_ALT)
        end
        unless (_fields = fields).nil?
        end
        unless (_key = key).nil?
        end
        unless (_oauth_token = oauth_token).nil?
        end
        unless (_pretty_print = pretty_print).nil?
        end
        unless (_quota_user = quota_user).nil?
        end
        unless (_upload_type = upload_type).nil?
        end
        unless (_user_ip = user_ip).nil?
        end
        unless (_user_project = user_project).nil?
        end
        unless (_notification = notification).nil?
          _notification.validate if _notification.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/notificationConfigs".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: notification, content_type: header_params["Content-Type"]?) if !notification.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "NotificationsApi.storage_notifications_insert",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a list of notification subscriptions for a given bucket.
    # @required @param bucket [String?] Name of a Google Cloud Storage bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::Notifications]
    def list(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::Notifications
      data, _status_code, _headers = list_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Retrieves a list of notification subscriptions for a given bucket.
    # @required @param bucket [String?] Name of a Google Cloud Storage bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::Notifications, Integer, Hash)] GoogleCloudStorage::Notifications, response status code and response headers
    def list_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::Notifications, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: NotificationsApi#list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Notifications.from_json(body), status_code, headers)
    end

    # Retrieves a list of notification subscriptions for a given bucket.
    # @required @param bucket [String?] Name of a Google Cloud Storage bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def list(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_NOTIFICATIONS_LIST_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_list(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: NotificationsApi.list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?
        unless (_bucket = bucket).nil?
        end
        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_NOTIFICATIONS_LIST_VALID_VALUES_FOR_ALT)
        end
        unless (_fields = fields).nil?
        end
        unless (_key = key).nil?
        end
        unless (_oauth_token = oauth_token).nil?
        end
        unless (_pretty_print = pretty_print).nil?
        end
        unless (_quota_user = quota_user).nil?
        end
        unless (_upload_type = upload_type).nil?
        end
        unless (_user_ip = user_ip).nil?
        end
        unless (_user_project = user_project).nil?
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/notificationConfigs".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "NotificationsApi.storage_notifications_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
