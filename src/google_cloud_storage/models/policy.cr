#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./policy_bindings_inner"

module GoogleCloudStorage
  # A bucket/object IAM policy.
  class Policy
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # An association between a role, which comes with a set of permissions, and members who may assume that role.
    @[JSON::Field(key: "bindings", type: Array(GoogleCloudStorage::PolicyBindingsInner)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bindings : Array(GoogleCloudStorage::PolicyBindingsInner)? = nil

    # HTTP 1.1  Entity tag for the policy.
    @[JSON::Field(key: "etag", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter etag : String? = nil

    # The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.
    @[JSON::Field(key: "kind", type: String?, default: "storage#policy", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "storage#policy"

    # The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, and projects/_/buckets/bucket/objects/object for objects. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.
    @[JSON::Field(key: "resourceId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter resource_id : String? = nil

    # The IAM policy format version.
    @[JSON::Field(key: "version", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter version : Int32? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @bindings : Array(GoogleCloudStorage::PolicyBindingsInner)? = nil,
      @etag : String? = nil,
      @kind : String? = "storage#policy",
      @resource_id : String? = nil,
      @version : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_bindings = @bindings).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "bindings", container: _bindings)) if _bindings.is_a?(Array)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_bindings = @bindings).nil?
        return false if _bindings.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _bindings)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bindings Object to be assigned
    def bindings=(new_value : Array(GoogleCloudStorage::PolicyBindingsInner)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @bindings = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] etag Object to be assigned
    def etag=(new_value : String?)
      @etag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_id Object to be assigned
    def resource_id=(new_value : String?)
      @resource_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(new_value : Int32?)
      @version = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bindings, @etag, @kind, @resource_id, @version)
  end
end
