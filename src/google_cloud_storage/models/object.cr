#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./object_access_control"
require "./object_customer_encryption"
require "./object_owner"

module GoogleCloudStorage
  # An object.
  class Object
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Access controls on the object.
    @[JSON::Field(key: "acl", type: Array(GoogleCloudStorage::ObjectAccessControl)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acl : Array(GoogleCloudStorage::ObjectAccessControl)? = nil

    # The name of the bucket containing this object.
    @[JSON::Field(key: "bucket", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bucket : String? = nil

    # Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
    @[JSON::Field(key: "cacheControl", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cache_control : String? = nil

    # Number of underlying components that make up this object. Components are accumulated by compose operations.
    @[JSON::Field(key: "componentCount", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter component_count : Int32? = nil

    # Content-Disposition of the object data.
    @[JSON::Field(key: "contentDisposition", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter content_disposition : String? = nil

    # Content-Encoding of the object data.
    @[JSON::Field(key: "contentEncoding", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter content_encoding : String? = nil

    # Content-Language of the object data.
    @[JSON::Field(key: "contentLanguage", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter content_language : String? = nil

    # Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
    @[JSON::Field(key: "contentType", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter content_type : String? = nil

    # CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
    @[JSON::Field(key: "crc32c", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter crc32c : String? = nil

    # A timestamp in RFC 3339 format specified by the user for an object.
    @[JSON::Field(key: "customTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter custom_time : Time? = nil

    @[JSON::Field(key: "customerEncryption", type: GoogleCloudStorage::ObjectCustomerEncryption?, default: nil, required: false, nullable: false, emit_null: false)]
    getter customer_encryption : GoogleCloudStorage::ObjectCustomerEncryption? = nil

    # HTTP 1.1 Entity tag for the object.
    @[JSON::Field(key: "etag", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter etag : String? = nil

    # Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
    @[JSON::Field(key: "eventBasedHold", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter event_based_hold : Bool? = nil

    # The content generation of this object. Used for object versioning.
    @[JSON::Field(key: "generation", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter generation : String? = nil

    # The ID of the object, including the bucket name, object name, and generation number.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The kind of item this is. For objects, this is always storage#object.
    @[JSON::Field(key: "kind", type: String?, default: "storage#object", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "storage#object"

    # Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
    @[JSON::Field(key: "kmsKeyName", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter kms_key_name : String? = nil

    # MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
    @[JSON::Field(key: "md5Hash", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter md5_hash : String? = nil

    # Media download link.
    @[JSON::Field(key: "mediaLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter media_link : String? = nil

    # User-provided metadata, in key/value pairs.
    @[JSON::Field(key: "metadata", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metadata : Hash(String, String)? = nil

    # The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
    @[JSON::Field(key: "metageneration", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metageneration : String? = nil

    # The name of the object. Required if not specified by URL parameter.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    @[JSON::Field(key: "owner", type: GoogleCloudStorage::ObjectOwner?, default: nil, required: false, nullable: false, emit_null: false)]
    getter owner : GoogleCloudStorage::ObjectOwner? = nil

    # A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
    @[JSON::Field(key: "retentionExpirationTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter retention_expiration_time : Time? = nil

    # The link to this object.
    @[JSON::Field(key: "selfLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter self_link : String? = nil

    # Content-Length of the data in bytes.
    @[JSON::Field(key: "size", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter size : String? = nil

    # Storage class of the object.
    @[JSON::Field(key: "storageClass", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter storage_class : String? = nil

    # Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
    @[JSON::Field(key: "temporaryHold", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter temporary_hold : Bool? = nil

    # The creation time of the object in RFC 3339 format.
    @[JSON::Field(key: "timeCreated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter time_created : Time? = nil

    # The deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
    @[JSON::Field(key: "timeDeleted", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter time_deleted : Time? = nil

    # The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
    @[JSON::Field(key: "timeStorageClassUpdated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter time_storage_class_updated : Time? = nil

    # The modification time of the object metadata in RFC 3339 format.
    @[JSON::Field(key: "updated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter updated : Time? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acl : Array(GoogleCloudStorage::ObjectAccessControl)? = nil,
      @bucket : String? = nil,
      @cache_control : String? = nil,
      @component_count : Int32? = nil,
      @content_disposition : String? = nil,
      @content_encoding : String? = nil,
      @content_language : String? = nil,
      @content_type : String? = nil,
      @crc32c : String? = nil,
      @custom_time : Time? = nil,
      @customer_encryption : GoogleCloudStorage::ObjectCustomerEncryption? = nil,
      @etag : String? = nil,
      @event_based_hold : Bool? = nil,
      @generation : String? = nil,
      @id : String? = nil,
      @kind : String? = "storage#object",
      @kms_key_name : String? = nil,
      @md5_hash : String? = nil,
      @media_link : String? = nil,
      @metadata : Hash(String, String)? = nil,
      @metageneration : String? = nil,
      @name : String? = nil,
      @owner : GoogleCloudStorage::ObjectOwner? = nil,
      @retention_expiration_time : Time? = nil,
      @self_link : String? = nil,
      @size : String? = nil,
      @storage_class : String? = nil,
      @temporary_hold : Bool? = nil,
      @time_created : Time? = nil,
      @time_deleted : Time? = nil,
      @time_storage_class_updated : Time? = nil,
      @updated : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_acl = @acl).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "acl", container: _acl)) if _acl.is_a?(Array)
      end

      unless (_customer_encryption = @customer_encryption).nil?
        invalid_properties.concat(_customer_encryption.list_invalid_properties_for("customer_encryption")) if _customer_encryption.is_a?(OpenApi::Validatable)
      end

      unless (_owner = @owner).nil?
        invalid_properties.concat(_owner.list_invalid_properties_for("owner")) if _owner.is_a?(OpenApi::Validatable)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_acl = @acl).nil?
        return false if _acl.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _acl)
      end

      unless (_customer_encryption = @customer_encryption).nil?
        return false if _customer_encryption.is_a?(OpenApi::Validatable) && !_customer_encryption.valid?
      end

      unless (_owner = @owner).nil?
        return false if _owner.is_a?(OpenApi::Validatable) && !_owner.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acl Object to be assigned
    def acl=(new_value : Array(GoogleCloudStorage::ObjectAccessControl)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @acl = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bucket Object to be assigned
    def bucket=(new_value : String?)
      @bucket = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cache_control Object to be assigned
    def cache_control=(new_value : String?)
      @cache_control = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] component_count Object to be assigned
    def component_count=(new_value : Int32?)
      @component_count = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content_disposition Object to be assigned
    def content_disposition=(new_value : String?)
      @content_disposition = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content_encoding Object to be assigned
    def content_encoding=(new_value : String?)
      @content_encoding = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content_language Object to be assigned
    def content_language=(new_value : String?)
      @content_language = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content_type Object to be assigned
    def content_type=(new_value : String?)
      @content_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] crc32c Object to be assigned
    def crc32c=(new_value : String?)
      @crc32c = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_time Object to be assigned
    def custom_time=(new_value : Time?)
      @custom_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_encryption Object to be assigned
    def customer_encryption=(new_value : GoogleCloudStorage::ObjectCustomerEncryption?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @customer_encryption = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] etag Object to be assigned
    def etag=(new_value : String?)
      @etag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_based_hold Object to be assigned
    def event_based_hold=(new_value : Bool?)
      @event_based_hold = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] generation Object to be assigned
    def generation=(new_value : String?)
      @generation = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kms_key_name Object to be assigned
    def kms_key_name=(new_value : String?)
      @kms_key_name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] md5_hash Object to be assigned
    def md5_hash=(new_value : String?)
      @md5_hash = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] media_link Object to be assigned
    def media_link=(new_value : String?)
      @media_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata Object to be assigned
    def metadata=(new_value : Hash(String, String)?)
      @metadata = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metageneration Object to be assigned
    def metageneration=(new_value : String?)
      @metageneration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(new_value : GoogleCloudStorage::ObjectOwner?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @owner = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] retention_expiration_time Object to be assigned
    def retention_expiration_time=(new_value : Time?)
      @retention_expiration_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] self_link Object to be assigned
    def self_link=(new_value : String?)
      @self_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] size Object to be assigned
    def size=(new_value : String?)
      @size = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] storage_class Object to be assigned
    def storage_class=(new_value : String?)
      @storage_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] temporary_hold Object to be assigned
    def temporary_hold=(new_value : Bool?)
      @temporary_hold = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_created Object to be assigned
    def time_created=(new_value : Time?)
      @time_created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_deleted Object to be assigned
    def time_deleted=(new_value : Time?)
      @time_deleted = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_storage_class_updated Object to be assigned
    def time_storage_class_updated=(new_value : Time?)
      @time_storage_class_updated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated Object to be assigned
    def updated=(new_value : Time?)
      @updated = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acl, @bucket, @cache_control, @component_count, @content_disposition, @content_encoding, @content_language, @content_type, @crc32c, @custom_time, @customer_encryption, @etag, @event_based_hold, @generation, @id, @kind, @kms_key_name, @md5_hash, @media_link, @metadata, @metageneration, @name, @owner, @retention_expiration_time, @self_link, @size, @storage_class, @temporary_hold, @time_created, @time_deleted, @time_storage_class_updated, @updated)
  end
end
