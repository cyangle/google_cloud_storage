#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleCloudStorage
  # JSON template to produce a JSON-style HMAC Key resource for Create responses.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class HmacKey
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The kind of item this is. For HMAC keys, this is always storage#hmacKey.
    @[JSON::Field(key: "kind", type: String?, default: "storage#hmacKey", presence: true, ignore_serialize: kind.nil? && !kind_present?)]
    property kind : String? = "storage#hmacKey"

    @[JSON::Field(ignore: true)]
    property? kind_present : Bool = false

    @[JSON::Field(key: "metadata", type: HmacKeyMetadata?, presence: true, ignore_serialize: metadata.nil? && !metadata_present?)]
    property metadata : HmacKeyMetadata?

    @[JSON::Field(ignore: true)]
    property? metadata_present : Bool = false

    # HMAC secret key material.
    @[JSON::Field(key: "secret", type: String?, presence: true, ignore_serialize: secret.nil? && !secret_present?)]
    property secret : String?

    @[JSON::Field(ignore: true)]
    property? secret_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @kind : String? = "storage#hmacKey",
      @metadata : HmacKeyMetadata? = nil,
      @secret : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@kind, @kind_present, @metadata, @metadata_present, @secret, @secret_present)
  end
end
