#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleCloudStorage
  # A bucket/object IAM policy.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Policy
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # An association between a role, which comes with a set of permissions, and members who may assume that role.
    @[JSON::Field(key: "bindings", type: Array(PolicyBindingsInner)?, presence: true, ignore_serialize: bindings.nil? && !bindings_present?)]
    property bindings : Array(PolicyBindingsInner)?

    @[JSON::Field(ignore: true)]
    property? bindings_present : Bool = false

    # HTTP 1.1  Entity tag for the policy.
    @[JSON::Field(key: "etag", type: String?, presence: true, ignore_serialize: etag.nil? && !etag_present?)]
    property etag : String?

    @[JSON::Field(ignore: true)]
    property? etag_present : Bool = false

    # The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.
    @[JSON::Field(key: "kind", type: String?, default: "storage#policy", presence: true, ignore_serialize: kind.nil? && !kind_present?)]
    property kind : String?

    @[JSON::Field(ignore: true)]
    property? kind_present : Bool = false

    # The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, and projects/_/buckets/bucket/objects/object for objects. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.
    @[JSON::Field(key: "resourceId", type: String?, presence: true, ignore_serialize: resource_id.nil? && !resource_id_present?)]
    property resource_id : String?

    @[JSON::Field(ignore: true)]
    property? resource_id_present : Bool = false

    # The IAM policy format version.
    @[JSON::Field(key: "version", type: Int32?, presence: true, ignore_serialize: version.nil? && !version_present?)]
    property version : Int32?

    @[JSON::Field(ignore: true)]
    property? version_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @bindings : Array(PolicyBindingsInner)? = nil, @etag : String? = nil, @kind : String? = "storage#policy", @resource_id : String? = nil, @version : Int32? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bindings, @etag, @kind, @resource_id, @version)
  end
end
