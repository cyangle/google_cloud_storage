#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleCloudStorage
  # The condition(s) under which the action will be taken.
  class BucketLifecycleRuleInnerCondition
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Age of an object (in days). This condition is satisfied when an object reaches the specified age.
    @[JSON::Field(key: "age", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter age : Int32? = nil

    # A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
    @[JSON::Field(key: "createdBefore", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter created_before : Time? = nil

    # A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the custom time on an object is before this date in UTC.
    @[JSON::Field(key: "customTimeBefore", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter custom_time_before : Time? = nil

    # Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
    @[JSON::Field(key: "daysSinceCustomTime", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter days_since_custom_time : Int32? = nil

    # Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
    @[JSON::Field(key: "daysSinceNoncurrentTime", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter days_since_noncurrent_time : Int32? = nil

    # Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
    @[JSON::Field(key: "isLive", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter is_live : Bool? = nil

    # A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the \"Early Access\" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
    @[JSON::Field(key: "matchesPattern", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter matches_pattern : String? = nil

    # List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.
    @[JSON::Field(key: "matchesPrefix", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter matches_prefix : Array(String)? = nil

    # Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
    @[JSON::Field(key: "matchesStorageClass", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter matches_storage_class : Array(String)? = nil

    # List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.
    @[JSON::Field(key: "matchesSuffix", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter matches_suffix : Array(String)? = nil

    # A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
    @[JSON::Field(key: "noncurrentTimeBefore", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::ISO8601DateConverter)]
    getter noncurrent_time_before : Time? = nil

    # Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
    @[JSON::Field(key: "numNewerVersions", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter num_newer_versions : Int32? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @age : Int32? = nil,
      @created_before : Time? = nil,
      @custom_time_before : Time? = nil,
      @days_since_custom_time : Int32? = nil,
      @days_since_noncurrent_time : Int32? = nil,
      @is_live : Bool? = nil,
      @matches_pattern : String? = nil,
      @matches_prefix : Array(String)? = nil,
      @matches_storage_class : Array(String)? = nil,
      @matches_suffix : Array(String)? = nil,
      @noncurrent_time_before : Time? = nil,
      @num_newer_versions : Int32? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] age Object to be assigned
    def age=(new_value : Int32?)
      @age = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_before Object to be assigned
    def created_before=(new_value : Time?)
      @created_before = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_time_before Object to be assigned
    def custom_time_before=(new_value : Time?)
      @custom_time_before = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_since_custom_time Object to be assigned
    def days_since_custom_time=(new_value : Int32?)
      @days_since_custom_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_since_noncurrent_time Object to be assigned
    def days_since_noncurrent_time=(new_value : Int32?)
      @days_since_noncurrent_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_live Object to be assigned
    def is_live=(new_value : Bool?)
      @is_live = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] matches_pattern Object to be assigned
    def matches_pattern=(new_value : String?)
      @matches_pattern = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] matches_prefix Object to be assigned
    def matches_prefix=(new_value : Array(String)?)
      @matches_prefix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] matches_storage_class Object to be assigned
    def matches_storage_class=(new_value : Array(String)?)
      @matches_storage_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] matches_suffix Object to be assigned
    def matches_suffix=(new_value : Array(String)?)
      @matches_suffix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] noncurrent_time_before Object to be assigned
    def noncurrent_time_before=(new_value : Time?)
      @noncurrent_time_before = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] num_newer_versions Object to be assigned
    def num_newer_versions=(new_value : Int32?)
      @num_newer_versions = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@age, @created_before, @custom_time_before, @days_since_custom_time, @days_since_noncurrent_time, @is_live, @matches_pattern, @matches_prefix, @matches_storage_class, @matches_suffix, @noncurrent_time_before, @num_newer_versions)
  end
end
