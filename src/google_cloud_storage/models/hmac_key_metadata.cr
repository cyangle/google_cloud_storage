#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleCloudStorage
  # JSON template to produce a JSON-style HMAC Key metadata resource.
  class HmacKeyMetadata
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The ID of the HMAC Key.
    @[JSON::Field(key: "accessId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter access_id : String? = nil

    # HTTP 1.1 Entity tag for the HMAC key.
    @[JSON::Field(key: "etag", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter etag : String? = nil

    # The ID of the HMAC key, including the Project ID and the Access ID.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The kind of item this is. For HMAC Key metadata, this is always storage#hmacKeyMetadata.
    @[JSON::Field(key: "kind", type: String?, default: "storage#hmacKeyMetadata", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "storage#hmacKeyMetadata"

    # Project ID owning the service account to which the key authenticates.
    @[JSON::Field(key: "projectId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter project_id : String? = nil

    # The link to this resource.
    @[JSON::Field(key: "selfLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter self_link : String? = nil

    # The email address of the key's associated service account.
    @[JSON::Field(key: "serviceAccountEmail", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter service_account_email : String? = nil

    # The state of the key. Can be one of ACTIVE, INACTIVE, or DELETED.
    @[JSON::Field(key: "state", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter state : String? = nil

    # The creation time of the HMAC key in RFC 3339 format.
    @[JSON::Field(key: "timeCreated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter time_created : Time? = nil

    # The last modification time of the HMAC key metadata in RFC 3339 format.
    @[JSON::Field(key: "updated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter updated : Time? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @access_id : String? = nil,
      @etag : String? = nil,
      @id : String? = nil,
      @kind : String? = "storage#hmacKeyMetadata",
      @project_id : String? = nil,
      @self_link : String? = nil,
      @service_account_email : String? = nil,
      @state : String? = nil,
      @time_created : Time? = nil,
      @updated : Time? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_access_id = @access_id).nil?
      end
      unless (_etag = @etag).nil?
      end
      unless (_id = @id).nil?
      end
      unless (_kind = @kind).nil?
      end
      unless (_project_id = @project_id).nil?
      end
      unless (_self_link = @self_link).nil?
      end
      unless (_service_account_email = @service_account_email).nil?
      end
      unless (_state = @state).nil?
      end
      unless (_time_created = @time_created).nil?
      end
      unless (_updated = @updated).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_access_id = @access_id).nil?
      end

      unless (_etag = @etag).nil?
      end

      unless (_id = @id).nil?
      end

      unless (_kind = @kind).nil?
      end

      unless (_project_id = @project_id).nil?
      end

      unless (_self_link = @self_link).nil?
      end

      unless (_service_account_email = @service_account_email).nil?
      end

      unless (_state = @state).nil?
      end

      unless (_time_created = @time_created).nil?
      end

      unless (_updated = @updated).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_id Object to be assigned
    def access_id=(new_value : String?)
      unless new_value.nil?
      end

      @access_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] etag Object to be assigned
    def etag=(new_value : String?)
      unless new_value.nil?
      end

      @etag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      unless new_value.nil?
      end

      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] project_id Object to be assigned
    def project_id=(new_value : String?)
      unless new_value.nil?
      end

      @project_id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] self_link Object to be assigned
    def self_link=(new_value : String?)
      unless new_value.nil?
      end

      @self_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_account_email Object to be assigned
    def service_account_email=(new_value : String?)
      unless new_value.nil?
      end

      @service_account_email = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(new_value : String?)
      unless new_value.nil?
      end

      @state = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_created Object to be assigned
    def time_created=(new_value : Time?)
      unless new_value.nil?
      end

      @time_created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated Object to be assigned
    def updated=(new_value : Time?)
      unless new_value.nil?
      end

      @updated = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@access_id, @etag, @id, @kind, @project_id, @self_link, @service_account_email, @state, @time_created, @updated)
  end
end
