#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./compose_request_source_objects_inner"

module GoogleCloudStorage
  # A Compose request.
  class ComposeRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "destination", type: GoogleCloudStorage::Object?, default: nil, required: false, nullable: false, emit_null: false)]
    getter destination : GoogleCloudStorage::Object? = nil

    # The kind of item this is.
    @[JSON::Field(key: "kind", type: String?, default: "storage#composeRequest", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "storage#composeRequest"

    # The list of source objects that will be concatenated into a single object.
    @[JSON::Field(key: "sourceObjects", type: Array(GoogleCloudStorage::ComposeRequestSourceObjectsInner)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter source_objects : Array(GoogleCloudStorage::ComposeRequestSourceObjectsInner)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @destination : GoogleCloudStorage::Object? = nil,
      @kind : String? = "storage#composeRequest",
      @source_objects : Array(GoogleCloudStorage::ComposeRequestSourceObjectsInner)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_destination = @destination).nil?
        invalid_properties.concat(_destination.list_invalid_properties_for("destination")) if _destination.is_a?(OpenApi::Validatable)
      end
      unless (_kind = @kind).nil?
      end
      unless (_source_objects = @source_objects).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "source_objects", container: _source_objects)) if _source_objects.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_destination = @destination).nil?
        return false if _destination.is_a?(OpenApi::Validatable) && !_destination.valid?
      end

      unless (_kind = @kind).nil?
      end

      unless (_source_objects = @source_objects).nil?
        return false if _source_objects.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _source_objects)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination Object to be assigned
    def destination=(new_value : GoogleCloudStorage::Object?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @destination = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      unless new_value.nil?
      end

      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_objects Object to be assigned
    def source_objects=(new_value : Array(GoogleCloudStorage::ComposeRequestSourceObjectsInner)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @source_objects = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@destination, @kind, @source_objects)
  end
end
