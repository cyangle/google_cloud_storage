#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleCloudStorage
  # The project team associated with the entity, if any.
  class BucketAccessControlProjectTeam
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The project number.
    @[JSON::Field(key: "projectNumber", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter project_number : String? = nil

    # The team.
    @[JSON::Field(key: "team", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter team : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @project_number : String? = nil,
      @team : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_project_number = @project_number).nil?
      end
      unless (_team = @team).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_project_number = @project_number).nil?
      end

      unless (_team = @team).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] project_number Object to be assigned
    def project_number=(new_value : String?)
      unless new_value.nil?
      end

      @project_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] team Object to be assigned
    def team=(new_value : String?)
      unless new_value.nil?
      end

      @team = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@project_number, @team)
  end
end
