#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleCloudStorage
  # Represents an expression text. Example: title: \"User account presence\" description: \"Determines whether the request has a user account\" expression: \"size(request.user) > 0\"
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Expr
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    @[JSON::Field(key: "description", type: String?, presence: true, ignore_serialize: description.nil? && !description_present?)]
    property description : String?

    @[JSON::Field(ignore: true)]
    property? description_present : Bool = false

    # Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.
    @[JSON::Field(key: "expression", type: String?, presence: true, ignore_serialize: expression.nil? && !expression_present?)]
    property expression : String?

    @[JSON::Field(ignore: true)]
    property? expression_present : Bool = false

    # An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
    @[JSON::Field(key: "location", type: String?, presence: true, ignore_serialize: location.nil? && !location_present?)]
    property location : String?

    @[JSON::Field(ignore: true)]
    property? location_present : Bool = false

    # An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    @[JSON::Field(key: "title", type: String?, presence: true, ignore_serialize: title.nil? && !title_present?)]
    property title : String?

    @[JSON::Field(ignore: true)]
    property? title_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @description : String? = nil, @expression : String? = nil, @location : String? = nil, @title : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        description == o.description &&
        expression == o.expression &&
        location == o.location &&
        title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, expression, location, title].hash
    end
  end
end
