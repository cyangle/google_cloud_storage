#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "uri"

module GoogleCloudStorage
  class BucketsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Permanently deletes an empty bucket.
    # @param bucket [String] Name of a bucket.
    # @return [nil]
    def delete(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      delete_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, provisional_user_project: provisional_user_project, user_project: user_project)
      nil
    end

    # Permanently deletes an empty bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_with_http_info(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      request = build_api_request_for_delete(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, provisional_user_project: provisional_user_project, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # Permanently deletes an empty bucket.
    # @param bucket [String] Name of a bucket.
    # @return nil
    def delete(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_delete(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, provisional_user_project: provisional_user_project, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_delete(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.delete ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil? && !if_metageneration_match.null?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil? && !if_metageneration_not_match.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns metadata for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Bucket]
    def get(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = get_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project)
      data
    end

    # Returns metadata for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Array<(Bucket, Integer, Hash)>] Bucket data, response status code and response headers
    def get_with_http_info(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      request = build_api_request_for_get(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Bucket.from_nason(data), status_code, headers
    end

    # Returns metadata for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return nil
    def get(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.get ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      allowable_values = ["full", "noAcl"]
      if @api_client.config.client_side_validation && !projection.nil? && !projection.null? && !allowable_values.includes?(projection)
        raise ArgumentError.new("invalid value for \"projection\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil? && !if_metageneration_match.null?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil? && !if_metageneration_not_match.null?
      query_params["projection"] = projection.to_s if !projection.nil? && !projection.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns an IAM policy for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Policy]
    def get_iam_policy(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, options_requested_policy_version : Int32? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = get_iam_policy_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, options_requested_policy_version: options_requested_policy_version, provisional_user_project: provisional_user_project, user_project: user_project)
      data
    end

    # Returns an IAM policy for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Array<(Policy, Integer, Hash)>] Policy data, response status code and response headers
    def get_iam_policy_with_http_info(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, options_requested_policy_version : Int32? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      request = build_api_request_for_get_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, options_requested_policy_version: options_requested_policy_version, provisional_user_project: provisional_user_project, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#get_iam_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Policy.from_nason(data), status_code, headers
    end

    # Returns an IAM policy for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return nil
    def get_iam_policy(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, options_requested_policy_version : Int32? = nil, provisional_user_project : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_get_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, options_requested_policy_version: options_requested_policy_version, provisional_user_project: provisional_user_project, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_get_iam_policy(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, options_requested_policy_version : Int32? = nil, provisional_user_project : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.get_iam_policy ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !options_requested_policy_version.nil? && options_requested_policy_version < 1
        raise ArgumentError.new("invalid value for \"options_requested_policy_version\" when calling BucketsApi.get_iam_policy, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/b/{bucket}/iam".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["optionsRequestedPolicyVersion"] = options_requested_policy_version.to_s if !options_requested_policy_version.nil? && !options_requested_policy_version.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_get_iam_policy",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Creates a new bucket.
    # @param project [String] A valid API project identifier.
    # @return [Bucket]
    def insert(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket : Bucket? = nil)
      data, _status_code, _headers = insert_with_http_info(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket: bucket)
      data
    end

    # Creates a new bucket.
    # @param project [String] A valid API project identifier.
    # @return [Array<(Bucket, Integer, Hash)>] Bucket data, response status code and response headers
    def insert_with_http_info(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket : Bucket? = nil)
      request = build_api_request_for_insert(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket: bucket)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#insert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Bucket.from_nason(data), status_code, headers
    end

    # Creates a new bucket.
    # @param project [String] A valid API project identifier.
    # @return nil
    def insert(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket : Bucket? = nil, &block : Crest::Response ->)
      build_api_request_for_insert(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket: bucket).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_insert(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket : Bucket? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.insert ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      allowable_values = ["authenticatedRead", "private", "projectPrivate", "publicRead", "publicReadWrite"]
      if @api_client.config.client_side_validation && !predefined_acl.nil? && !predefined_acl.null? && !allowable_values.includes?(predefined_acl)
        raise ArgumentError.new("invalid value for \"predefined_acl\", must be one of #{allowable_values}")
      end
      allowable_values = ["authenticatedRead", "bucketOwnerFullControl", "bucketOwnerRead", "private", "projectPrivate", "publicRead"]
      if @api_client.config.client_side_validation && !predefined_default_object_acl.nil? && !predefined_default_object_acl.null? && !allowable_values.includes?(predefined_default_object_acl)
        raise ArgumentError.new("invalid value for \"predefined_default_object_acl\", must be one of #{allowable_values}")
      end
      allowable_values = ["full", "noAcl"]
      if @api_client.config.client_side_validation && !projection.nil? && !projection.null? && !allowable_values.includes?(projection)
        raise ArgumentError.new("invalid value for \"projection\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b"

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["project"] = project.to_s if !project.nil? && !project.null?
      query_params["predefinedAcl"] = predefined_acl.to_s if !predefined_acl.nil? && !predefined_acl.null?
      query_params["predefinedDefaultObjectAcl"] = predefined_default_object_acl.to_s if !predefined_default_object_acl.nil? && !predefined_default_object_acl.null?
      query_params["projection"] = projection.to_s if !projection.nil? && !projection.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = bucket.to_nason

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_insert",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a list of buckets for a given project.
    # @param project [String] A valid API project identifier.
    # @return [Buckets]
    def list(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, prefix : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = list_with_http_info(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project)
      data
    end

    # Retrieves a list of buckets for a given project.
    # @param project [String] A valid API project identifier.
    # @return [Array<(Buckets, Integer, Hash)>] Buckets data, response status code and response headers
    def list_with_http_info(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, prefix : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      request = build_api_request_for_list(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Buckets.from_nason(data), status_code, headers
    end

    # Retrieves a list of buckets for a given project.
    # @param project [String] A valid API project identifier.
    # @return nil
    def list(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, prefix : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_list(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_list(*, project : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, prefix : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.list ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !max_results.nil? && max_results < 0
        raise ArgumentError.new("invalid value for \"max_results\" when calling BucketsApi.list, must be greater than or equal to 0.")
      end

      allowable_values = ["full", "noAcl"]
      if @api_client.config.client_side_validation && !projection.nil? && !projection.null? && !allowable_values.includes?(projection)
        raise ArgumentError.new("invalid value for \"projection\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b"

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["project"] = project.to_s if !project.nil? && !project.null?
      query_params["maxResults"] = max_results.to_s if !max_results.nil? && !max_results.null?
      query_params["pageToken"] = page_token.to_s if !page_token.nil? && !page_token.null?
      query_params["prefix"] = prefix.to_s if !prefix.nil? && !prefix.null?
      query_params["projection"] = projection.to_s if !projection.nil? && !projection.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Locks retention policy on a bucket.
    # @param bucket [String] Name of a bucket.
    # @param if_metageneration_match [String] Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # @return [Bucket]
    def lock_retention_policy(*, bucket : String, if_metageneration_match : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = lock_retention_policy_with_http_info(bucket: bucket, if_metageneration_match: if_metageneration_match, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project)
      data
    end

    # Locks retention policy on a bucket.
    # @param bucket [String] Name of a bucket.
    # @param if_metageneration_match [String] Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # @return [Array<(Bucket, Integer, Hash)>] Bucket data, response status code and response headers
    def lock_retention_policy_with_http_info(*, bucket : String, if_metageneration_match : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      request = build_api_request_for_lock_retention_policy(bucket: bucket, if_metageneration_match: if_metageneration_match, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#lock_retention_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Bucket.from_nason(data), status_code, headers
    end

    # Locks retention policy on a bucket.
    # @param bucket [String] Name of a bucket.
    # @param if_metageneration_match [String] Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # @return nil
    def lock_retention_policy(*, bucket : String, if_metageneration_match : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_lock_retention_policy(bucket: bucket, if_metageneration_match: if_metageneration_match, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_lock_retention_policy(*, bucket : String, if_metageneration_match : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.lock_retention_policy ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}/lockRetentionPolicy".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil? && !if_metageneration_match.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_lock_retention_policy",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @param bucket [String] Name of a bucket.
    # @return [Bucket]
    def patch(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil)
      data, _status_code, _headers = patch_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket2: bucket2)
      data
    end

    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @param bucket [String] Name of a bucket.
    # @return [Array<(Bucket, Integer, Hash)>] Bucket data, response status code and response headers
    def patch_with_http_info(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil)
      request = build_api_request_for_patch(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket2: bucket2)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Bucket.from_nason(data), status_code, headers
    end

    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @param bucket [String] Name of a bucket.
    # @return nil
    def patch(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil, &block : Crest::Response ->)
      build_api_request_for_patch(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket2: bucket2).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_patch(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.patch ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      allowable_values = ["authenticatedRead", "private", "projectPrivate", "publicRead", "publicReadWrite"]
      if @api_client.config.client_side_validation && !predefined_acl.nil? && !predefined_acl.null? && !allowable_values.includes?(predefined_acl)
        raise ArgumentError.new("invalid value for \"predefined_acl\", must be one of #{allowable_values}")
      end
      allowable_values = ["authenticatedRead", "bucketOwnerFullControl", "bucketOwnerRead", "private", "projectPrivate", "publicRead"]
      if @api_client.config.client_side_validation && !predefined_default_object_acl.nil? && !predefined_default_object_acl.null? && !allowable_values.includes?(predefined_default_object_acl)
        raise ArgumentError.new("invalid value for \"predefined_default_object_acl\", must be one of #{allowable_values}")
      end
      allowable_values = ["full", "noAcl"]
      if @api_client.config.client_side_validation && !projection.nil? && !projection.null? && !allowable_values.includes?(projection)
        raise ArgumentError.new("invalid value for \"projection\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil? && !if_metageneration_match.null?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil? && !if_metageneration_not_match.null?
      query_params["predefinedAcl"] = predefined_acl.to_s if !predefined_acl.nil? && !predefined_acl.null?
      query_params["predefinedDefaultObjectAcl"] = predefined_default_object_acl.to_s if !predefined_default_object_acl.nil? && !predefined_default_object_acl.null?
      query_params["projection"] = projection.to_s if !projection.nil? && !projection.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = bucket2.to_nason

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"PATCH",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_patch",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates an IAM policy for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Policy]
    def set_iam_policy(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, policy : Policy? = nil)
      data, _status_code, _headers = set_iam_policy_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project, policy: policy)
      data
    end

    # Updates an IAM policy for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return [Array<(Policy, Integer, Hash)>] Policy data, response status code and response headers
    def set_iam_policy_with_http_info(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, policy : Policy? = nil)
      request = build_api_request_for_set_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project, policy: policy)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#set_iam_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Policy.from_nason(data), status_code, headers
    end

    # Updates an IAM policy for the specified bucket.
    # @param bucket [String] Name of a bucket.
    # @return nil
    def set_iam_policy(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, policy : Policy? = nil, &block : Crest::Response ->)
      build_api_request_for_set_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project, policy: policy).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_set_iam_policy(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, policy : Policy? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.set_iam_policy ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}/iam".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = policy.to_nason

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_set_iam_policy",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    # @param bucket [String] Name of a bucket.
    # @param permissions [Array(String)] Permissions to test.
    # @return [TestIamPermissionsResponse]
    def test_iam_permissions(*, bucket : String, permissions : Array(String), alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = test_iam_permissions_with_http_info(bucket: bucket, permissions: permissions, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project)
      data
    end

    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    # @param bucket [String] Name of a bucket.
    # @param permissions [Array(String)] Permissions to test.
    # @return [Array<(TestIamPermissionsResponse, Integer, Hash)>] TestIamPermissionsResponse data, response status code and response headers
    def test_iam_permissions_with_http_info(*, bucket : String, permissions : Array(String), alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil)
      request = build_api_request_for_test_iam_permissions(bucket: bucket, permissions: permissions, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#test_iam_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return TestIamPermissionsResponse.from_nason(data), status_code, headers
    end

    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    # @param bucket [String] Name of a bucket.
    # @param permissions [Array(String)] Permissions to test.
    # @return nil
    def test_iam_permissions(*, bucket : String, permissions : Array(String), alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_test_iam_permissions(bucket: bucket, permissions: permissions, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, provisional_user_project: provisional_user_project, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_iam_permissions(*, bucket : String, permissions : Array(String), alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.test_iam_permissions ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}/iam/testPermissions".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["permissions"] = @api_client.build_collection_param(permissions, "multi") if !permissions.nil? && !permissions.null? && !permissions.empty?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_test_iam_permissions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @param bucket [String] Name of a bucket.
    # @return [Bucket]
    def update(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil)
      data, _status_code, _headers = update_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket2: bucket2)
      data
    end

    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @param bucket [String] Name of a bucket.
    # @return [Array<(Bucket, Integer, Hash)>] Bucket data, response status code and response headers
    def update_with_http_info(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil)
      request = build_api_request_for_update(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket2: bucket2)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: BucketsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Bucket.from_nason(data), status_code, headers
    end

    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @param bucket [String] Name of a bucket.
    # @return nil
    def update(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil, &block : Crest::Response ->)
      build_api_request_for_update(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, provisional_user_project: provisional_user_project, user_project: user_project, bucket2: bucket2).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_update(*, bucket : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, user_ip : String? = nil, if_metageneration_match : String? = nil, if_metageneration_not_match : String? = nil, predefined_acl : String? = nil, predefined_default_object_acl : String? = nil, projection : String? = nil, provisional_user_project : String? = nil, user_project : String? = nil, bucket2 : Bucket? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: BucketsApi.update ..." }
      end
      allowable_values = ["json"]
      if @api_client.config.client_side_validation && !alt.nil? && !alt.null? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      allowable_values = ["authenticatedRead", "private", "projectPrivate", "publicRead", "publicReadWrite"]
      if @api_client.config.client_side_validation && !predefined_acl.nil? && !predefined_acl.null? && !allowable_values.includes?(predefined_acl)
        raise ArgumentError.new("invalid value for \"predefined_acl\", must be one of #{allowable_values}")
      end
      allowable_values = ["authenticatedRead", "bucketOwnerFullControl", "bucketOwnerRead", "private", "projectPrivate", "publicRead"]
      if @api_client.config.client_side_validation && !predefined_default_object_acl.nil? && !predefined_default_object_acl.null? && !allowable_values.includes?(predefined_default_object_acl)
        raise ArgumentError.new("invalid value for \"predefined_default_object_acl\", must be one of #{allowable_values}")
      end
      allowable_values = ["full", "noAcl"]
      if @api_client.config.client_side_validation && !projection.nil? && !projection.null? && !allowable_values.includes?(projection)
        raise ArgumentError.new("invalid value for \"projection\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["alt"] = alt.to_s if !alt.nil? && !alt.null?
      query_params["fields"] = fields.to_s if !fields.nil? && !fields.null?
      query_params["key"] = key.to_s if !key.nil? && !key.null?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil? && !oauth_token.null?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil? && !pretty_print.null?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil? && !quota_user.null?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil? && !user_ip.null?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil? && !if_metageneration_match.null?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil? && !if_metageneration_not_match.null?
      query_params["predefinedAcl"] = predefined_acl.to_s if !predefined_acl.nil? && !predefined_acl.null?
      query_params["predefinedDefaultObjectAcl"] = predefined_default_object_acl.to_s if !predefined_default_object_acl.nil? && !predefined_default_object_acl.null?
      query_params["projection"] = projection.to_s if !projection.nil? && !projection.null?
      query_params["provisionalUserProject"] = provisional_user_project.to_s if !provisional_user_project.nil? && !provisional_user_project.null?
      query_params["userProject"] = user_project.to_s if !user_project.nil? && !user_project.null?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = bucket2.to_nason

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
