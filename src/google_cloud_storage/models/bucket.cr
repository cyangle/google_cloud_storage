#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bucket_access_control"
require "./bucket_autoclass"
require "./bucket_billing"
require "./bucket_cors_inner"
require "./bucket_encryption"
require "./bucket_iam_configuration"
require "./bucket_lifecycle"
require "./bucket_logging"
require "./bucket_owner"
require "./bucket_retention_policy"
require "./bucket_versioning"
require "./bucket_website"
require "./object_access_control"

module GoogleCloudStorage
  # A bucket.
  class Bucket
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Access controls on the bucket.
    @[JSON::Field(key: "acl", type: Array(GoogleCloudStorage::BucketAccessControl)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter acl : Array(GoogleCloudStorage::BucketAccessControl)? = nil

    @[JSON::Field(key: "autoclass", type: GoogleCloudStorage::BucketAutoclass?, default: nil, required: false, nullable: false, emit_null: false)]
    getter autoclass : GoogleCloudStorage::BucketAutoclass? = nil

    @[JSON::Field(key: "billing", type: GoogleCloudStorage::BucketBilling?, default: nil, required: false, nullable: false, emit_null: false)]
    getter billing : GoogleCloudStorage::BucketBilling? = nil

    # The bucket's Cross-Origin Resource Sharing (CORS) configuration.
    @[JSON::Field(key: "cors", type: Array(GoogleCloudStorage::BucketCorsInner)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter cors : Array(GoogleCloudStorage::BucketCorsInner)? = nil

    # The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
    @[JSON::Field(key: "defaultEventBasedHold", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_event_based_hold : Bool? = nil

    # Default access controls to apply to new objects when no ACL is provided.
    @[JSON::Field(key: "defaultObjectAcl", type: Array(GoogleCloudStorage::ObjectAccessControl)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter default_object_acl : Array(GoogleCloudStorage::ObjectAccessControl)? = nil

    @[JSON::Field(key: "encryption", type: GoogleCloudStorage::BucketEncryption?, default: nil, required: false, nullable: false, emit_null: false)]
    getter encryption : GoogleCloudStorage::BucketEncryption? = nil

    # HTTP 1.1 Entity tag for the bucket.
    @[JSON::Field(key: "etag", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter etag : String? = nil

    @[JSON::Field(key: "iamConfiguration", type: GoogleCloudStorage::BucketIamConfiguration?, default: nil, required: false, nullable: false, emit_null: false)]
    getter iam_configuration : GoogleCloudStorage::BucketIamConfiguration? = nil

    # The ID of the bucket. For buckets, the id and name properties are the same.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The kind of item this is. For buckets, this is always storage#bucket.
    @[JSON::Field(key: "kind", type: String?, default: "storage#bucket", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "storage#bucket"

    # User-provided labels, in key/value pairs.
    @[JSON::Field(key: "labels", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter labels : Hash(String, String)? = nil

    @[JSON::Field(key: "lifecycle", type: GoogleCloudStorage::BucketLifecycle?, default: nil, required: false, nullable: false, emit_null: false)]
    getter lifecycle : GoogleCloudStorage::BucketLifecycle? = nil

    # The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
    @[JSON::Field(key: "location", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter location : String? = nil

    # The type of the bucket location.
    @[JSON::Field(key: "locationType", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter location_type : String? = nil

    @[JSON::Field(key: "logging", type: GoogleCloudStorage::BucketLogging?, default: nil, required: false, nullable: false, emit_null: false)]
    getter logging : GoogleCloudStorage::BucketLogging? = nil

    # The metadata generation of this bucket.
    @[JSON::Field(key: "metageneration", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter metageneration : String? = nil

    # The name of the bucket.
    @[JSON::Field(key: "name", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter name : String? = nil

    @[JSON::Field(key: "owner", type: GoogleCloudStorage::BucketOwner?, default: nil, required: false, nullable: false, emit_null: false)]
    getter owner : GoogleCloudStorage::BucketOwner? = nil

    # The project number of the project the bucket belongs to.
    @[JSON::Field(key: "projectNumber", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter project_number : String? = nil

    @[JSON::Field(key: "retentionPolicy", type: GoogleCloudStorage::BucketRetentionPolicy?, default: nil, required: false, nullable: false, emit_null: false)]
    getter retention_policy : GoogleCloudStorage::BucketRetentionPolicy? = nil

    # The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
    @[JSON::Field(key: "rpo", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter rpo : String? = nil

    # Reserved for future use.
    @[JSON::Field(key: "satisfiesPZS", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter satisfies_pzs : Bool? = nil

    # The URI of this bucket.
    @[JSON::Field(key: "selfLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter self_link : String? = nil

    # The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
    @[JSON::Field(key: "storageClass", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter storage_class : String? = nil

    # The creation time of the bucket in RFC 3339 format.
    @[JSON::Field(key: "timeCreated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter time_created : Time? = nil

    # The modification time of the bucket in RFC 3339 format.
    @[JSON::Field(key: "updated", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter updated : Time? = nil

    @[JSON::Field(key: "versioning", type: GoogleCloudStorage::BucketVersioning?, default: nil, required: false, nullable: false, emit_null: false)]
    getter versioning : GoogleCloudStorage::BucketVersioning? = nil

    @[JSON::Field(key: "website", type: GoogleCloudStorage::BucketWebsite?, default: nil, required: false, nullable: false, emit_null: false)]
    getter website : GoogleCloudStorage::BucketWebsite? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @acl : Array(GoogleCloudStorage::BucketAccessControl)? = nil,
      @autoclass : GoogleCloudStorage::BucketAutoclass? = nil,
      @billing : GoogleCloudStorage::BucketBilling? = nil,
      @cors : Array(GoogleCloudStorage::BucketCorsInner)? = nil,
      @default_event_based_hold : Bool? = nil,
      @default_object_acl : Array(GoogleCloudStorage::ObjectAccessControl)? = nil,
      @encryption : GoogleCloudStorage::BucketEncryption? = nil,
      @etag : String? = nil,
      @iam_configuration : GoogleCloudStorage::BucketIamConfiguration? = nil,
      @id : String? = nil,
      @kind : String? = "storage#bucket",
      @labels : Hash(String, String)? = nil,
      @lifecycle : GoogleCloudStorage::BucketLifecycle? = nil,
      @location : String? = nil,
      @location_type : String? = nil,
      @logging : GoogleCloudStorage::BucketLogging? = nil,
      @metageneration : String? = nil,
      @name : String? = nil,
      @owner : GoogleCloudStorage::BucketOwner? = nil,
      @project_number : String? = nil,
      @retention_policy : GoogleCloudStorage::BucketRetentionPolicy? = nil,
      @rpo : String? = nil,
      @satisfies_pzs : Bool? = nil,
      @self_link : String? = nil,
      @storage_class : String? = nil,
      @time_created : Time? = nil,
      @updated : Time? = nil,
      @versioning : GoogleCloudStorage::BucketVersioning? = nil,
      @website : GoogleCloudStorage::BucketWebsite? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_acl = @acl).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "acl", container: _acl)) if _acl.is_a?(Array)
      end
      unless (_autoclass = @autoclass).nil?
        invalid_properties.concat(_autoclass.list_invalid_properties_for("autoclass")) if _autoclass.is_a?(OpenApi::Validatable)
      end
      unless (_billing = @billing).nil?
        invalid_properties.concat(_billing.list_invalid_properties_for("billing")) if _billing.is_a?(OpenApi::Validatable)
      end
      unless (_cors = @cors).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "cors", container: _cors)) if _cors.is_a?(Array)
      end
      unless (_default_event_based_hold = @default_event_based_hold).nil?
      end
      unless (_default_object_acl = @default_object_acl).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "default_object_acl", container: _default_object_acl)) if _default_object_acl.is_a?(Array)
      end
      unless (_encryption = @encryption).nil?
        invalid_properties.concat(_encryption.list_invalid_properties_for("encryption")) if _encryption.is_a?(OpenApi::Validatable)
      end
      unless (_etag = @etag).nil?
      end
      unless (_iam_configuration = @iam_configuration).nil?
        invalid_properties.concat(_iam_configuration.list_invalid_properties_for("iam_configuration")) if _iam_configuration.is_a?(OpenApi::Validatable)
      end
      unless (_id = @id).nil?
      end
      unless (_kind = @kind).nil?
      end
      unless (_labels = @labels).nil?
      end
      unless (_lifecycle = @lifecycle).nil?
        invalid_properties.concat(_lifecycle.list_invalid_properties_for("lifecycle")) if _lifecycle.is_a?(OpenApi::Validatable)
      end
      unless (_location = @location).nil?
      end
      unless (_location_type = @location_type).nil?
      end
      unless (_logging = @logging).nil?
        invalid_properties.concat(_logging.list_invalid_properties_for("logging")) if _logging.is_a?(OpenApi::Validatable)
      end
      unless (_metageneration = @metageneration).nil?
      end
      unless (_name = @name).nil?
      end
      unless (_owner = @owner).nil?
        invalid_properties.concat(_owner.list_invalid_properties_for("owner")) if _owner.is_a?(OpenApi::Validatable)
      end
      unless (_project_number = @project_number).nil?
      end
      unless (_retention_policy = @retention_policy).nil?
        invalid_properties.concat(_retention_policy.list_invalid_properties_for("retention_policy")) if _retention_policy.is_a?(OpenApi::Validatable)
      end
      unless (_rpo = @rpo).nil?
      end
      unless (_satisfies_pzs = @satisfies_pzs).nil?
      end
      unless (_self_link = @self_link).nil?
      end
      unless (_storage_class = @storage_class).nil?
      end
      unless (_time_created = @time_created).nil?
      end
      unless (_updated = @updated).nil?
      end
      unless (_versioning = @versioning).nil?
        invalid_properties.concat(_versioning.list_invalid_properties_for("versioning")) if _versioning.is_a?(OpenApi::Validatable)
      end
      unless (_website = @website).nil?
        invalid_properties.concat(_website.list_invalid_properties_for("website")) if _website.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_acl = @acl).nil?
        return false if _acl.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _acl)
      end

      unless (_autoclass = @autoclass).nil?
        return false if _autoclass.is_a?(OpenApi::Validatable) && !_autoclass.valid?
      end

      unless (_billing = @billing).nil?
        return false if _billing.is_a?(OpenApi::Validatable) && !_billing.valid?
      end

      unless (_cors = @cors).nil?
        return false if _cors.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _cors)
      end

      unless (_default_event_based_hold = @default_event_based_hold).nil?
      end

      unless (_default_object_acl = @default_object_acl).nil?
        return false if _default_object_acl.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _default_object_acl)
      end

      unless (_encryption = @encryption).nil?
        return false if _encryption.is_a?(OpenApi::Validatable) && !_encryption.valid?
      end

      unless (_etag = @etag).nil?
      end

      unless (_iam_configuration = @iam_configuration).nil?
        return false if _iam_configuration.is_a?(OpenApi::Validatable) && !_iam_configuration.valid?
      end

      unless (_id = @id).nil?
      end

      unless (_kind = @kind).nil?
      end

      unless (_labels = @labels).nil?
      end

      unless (_lifecycle = @lifecycle).nil?
        return false if _lifecycle.is_a?(OpenApi::Validatable) && !_lifecycle.valid?
      end

      unless (_location = @location).nil?
      end

      unless (_location_type = @location_type).nil?
      end

      unless (_logging = @logging).nil?
        return false if _logging.is_a?(OpenApi::Validatable) && !_logging.valid?
      end

      unless (_metageneration = @metageneration).nil?
      end

      unless (_name = @name).nil?
      end

      unless (_owner = @owner).nil?
        return false if _owner.is_a?(OpenApi::Validatable) && !_owner.valid?
      end

      unless (_project_number = @project_number).nil?
      end

      unless (_retention_policy = @retention_policy).nil?
        return false if _retention_policy.is_a?(OpenApi::Validatable) && !_retention_policy.valid?
      end

      unless (_rpo = @rpo).nil?
      end

      unless (_satisfies_pzs = @satisfies_pzs).nil?
      end

      unless (_self_link = @self_link).nil?
      end

      unless (_storage_class = @storage_class).nil?
      end

      unless (_time_created = @time_created).nil?
      end

      unless (_updated = @updated).nil?
      end

      unless (_versioning = @versioning).nil?
        return false if _versioning.is_a?(OpenApi::Validatable) && !_versioning.valid?
      end

      unless (_website = @website).nil?
        return false if _website.is_a?(OpenApi::Validatable) && !_website.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] acl Object to be assigned
    def acl=(new_value : Array(GoogleCloudStorage::BucketAccessControl)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @acl = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] autoclass Object to be assigned
    def autoclass=(new_value : GoogleCloudStorage::BucketAutoclass?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @autoclass = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing Object to be assigned
    def billing=(new_value : GoogleCloudStorage::BucketBilling?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @billing = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cors Object to be assigned
    def cors=(new_value : Array(GoogleCloudStorage::BucketCorsInner)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @cors = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_event_based_hold Object to be assigned
    def default_event_based_hold=(new_value : Bool?)
      unless new_value.nil?
      end

      @default_event_based_hold = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_object_acl Object to be assigned
    def default_object_acl=(new_value : Array(GoogleCloudStorage::ObjectAccessControl)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @default_object_acl = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encryption Object to be assigned
    def encryption=(new_value : GoogleCloudStorage::BucketEncryption?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @encryption = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] etag Object to be assigned
    def etag=(new_value : String?)
      unless new_value.nil?
      end

      @etag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] iam_configuration Object to be assigned
    def iam_configuration=(new_value : GoogleCloudStorage::BucketIamConfiguration?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @iam_configuration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      unless new_value.nil?
      end

      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] labels Object to be assigned
    def labels=(new_value : Hash(String, String)?)
      unless new_value.nil?
      end

      @labels = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle Object to be assigned
    def lifecycle=(new_value : GoogleCloudStorage::BucketLifecycle?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @lifecycle = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location Object to be assigned
    def location=(new_value : String?)
      unless new_value.nil?
      end

      @location = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location_type Object to be assigned
    def location_type=(new_value : String?)
      unless new_value.nil?
      end

      @location_type = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logging Object to be assigned
    def logging=(new_value : GoogleCloudStorage::BucketLogging?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @logging = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metageneration Object to be assigned
    def metageneration=(new_value : String?)
      unless new_value.nil?
      end

      @metageneration = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(new_value : String?)
      unless new_value.nil?
      end

      @name = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] owner Object to be assigned
    def owner=(new_value : GoogleCloudStorage::BucketOwner?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @owner = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] project_number Object to be assigned
    def project_number=(new_value : String?)
      unless new_value.nil?
      end

      @project_number = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] retention_policy Object to be assigned
    def retention_policy=(new_value : GoogleCloudStorage::BucketRetentionPolicy?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @retention_policy = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rpo Object to be assigned
    def rpo=(new_value : String?)
      unless new_value.nil?
      end

      @rpo = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] satisfies_pzs Object to be assigned
    def satisfies_pzs=(new_value : Bool?)
      unless new_value.nil?
      end

      @satisfies_pzs = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] self_link Object to be assigned
    def self_link=(new_value : String?)
      unless new_value.nil?
      end

      @self_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] storage_class Object to be assigned
    def storage_class=(new_value : String?)
      unless new_value.nil?
      end

      @storage_class = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_created Object to be assigned
    def time_created=(new_value : Time?)
      unless new_value.nil?
      end

      @time_created = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] updated Object to be assigned
    def updated=(new_value : Time?)
      unless new_value.nil?
      end

      @updated = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] versioning Object to be assigned
    def versioning=(new_value : GoogleCloudStorage::BucketVersioning?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @versioning = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] website Object to be assigned
    def website=(new_value : GoogleCloudStorage::BucketWebsite?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @website = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@acl, @autoclass, @billing, @cors, @default_event_based_hold, @default_object_acl, @encryption, @etag, @iam_configuration, @id, @kind, @labels, @lifecycle, @location, @location_type, @logging, @metageneration, @name, @owner, @project_number, @retention_policy, @rpo, @satisfies_pzs, @self_link, @storage_class, @time_created, @updated, @versioning, @website)
  end
end
