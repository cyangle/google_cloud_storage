#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "uri"

module GoogleCloudStorage
  class ProjectsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a new HMAC key for the specified service account.
    # @param project_id [String] Project ID owning the service account.
    # @param service_account_email [String] Email address of the service account.
    # @return [HmacKey]
    def hmac_keys_create(*, project_id : String, service_account_email : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = hmac_keys_create_with_http_info(project_id: project_id, service_account_email: service_account_email, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Creates a new HMAC key for the specified service account.
    # @param project_id [String] Project ID owning the service account.
    # @param service_account_email [String] Email address of the service account.
    # @return [Array<(HmacKey, Integer, Hash)>] HmacKey data, response status code and response headers
    def hmac_keys_create_with_http_info(*, project_id : String, service_account_email : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      request = build_api_request_for_hmac_keys_create(project_id: project_id, service_account_email: service_account_email, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ProjectsApi#hmac_keys_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return HmacKey.from_json(data), status_code, headers
    end

    # Creates a new HMAC key for the specified service account.
    # @param project_id [String] Project ID owning the service account.
    # @param service_account_email [String] Email address of the service account.
    # @return nil
    def hmac_keys_create(*, project_id : String, service_account_email : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_hmac_keys_create(project_id: project_id, service_account_email: service_account_email, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_hmac_keys_create(*, project_id : String, service_account_email : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ProjectsApi.hmac_keys_create ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["serviceAccountEmail"] = service_account_email.to_s if !service_account_email.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Deletes an HMAC key.
    # @param project_id [String] Project ID owning the requested key
    # @param access_id [String] Name of the HMAC key to be deleted.
    # @return [nil]
    def hmac_keys_delete(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      hmac_keys_delete_with_http_info(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      nil
    end

    # Deletes an HMAC key.
    # @param project_id [String] Project ID owning the requested key
    # @param access_id [String] Name of the HMAC key to be deleted.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def hmac_keys_delete_with_http_info(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      request = build_api_request_for_hmac_keys_delete(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ProjectsApi#hmac_keys_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # Deletes an HMAC key.
    # @param project_id [String] Project ID owning the requested key
    # @param access_id [String] Name of the HMAC key to be deleted.
    # @return nil
    def hmac_keys_delete(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_hmac_keys_delete(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_hmac_keys_delete(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ProjectsApi.hmac_keys_delete ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys/{accessId}".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s)).sub("{" + "accessId" + "}", URI.encode_path(access_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves an HMAC key's metadata
    # @param project_id [String] Project ID owning the service account of the requested key.
    # @param access_id [String] Name of the HMAC key.
    # @return [HmacKeyMetadata]
    def hmac_keys_get(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = hmac_keys_get_with_http_info(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Retrieves an HMAC key&#39;s metadata
    # @param project_id [String] Project ID owning the service account of the requested key.
    # @param access_id [String] Name of the HMAC key.
    # @return [Array<(HmacKeyMetadata, Integer, Hash)>] HmacKeyMetadata data, response status code and response headers
    def hmac_keys_get_with_http_info(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      request = build_api_request_for_hmac_keys_get(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ProjectsApi#hmac_keys_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return HmacKeyMetadata.from_json(data), status_code, headers
    end

    # Retrieves an HMAC key&#39;s metadata
    # @param project_id [String] Project ID owning the service account of the requested key.
    # @param access_id [String] Name of the HMAC key.
    # @return nil
    def hmac_keys_get(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_hmac_keys_get(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_hmac_keys_get(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ProjectsApi.hmac_keys_get ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys/{accessId}".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s)).sub("{" + "accessId" + "}", URI.encode_path(access_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a list of HMAC keys matching the criteria.
    # @param project_id [String] Name of the project in which to look for HMAC keys.
    # @return [HmacKeysMetadata]
    def hmac_keys_list(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, service_account_email : String? = nil, show_deleted_keys : Bool? = nil, user_project : String? = nil)
      data, _status_code, _headers = hmac_keys_list_with_http_info(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, user_project: user_project)
      data
    end

    # Retrieves a list of HMAC keys matching the criteria.
    # @param project_id [String] Name of the project in which to look for HMAC keys.
    # @return [Array<(HmacKeysMetadata, Integer, Hash)>] HmacKeysMetadata data, response status code and response headers
    def hmac_keys_list_with_http_info(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, service_account_email : String? = nil, show_deleted_keys : Bool? = nil, user_project : String? = nil)
      request = build_api_request_for_hmac_keys_list(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ProjectsApi#hmac_keys_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return HmacKeysMetadata.from_json(data), status_code, headers
    end

    # Retrieves a list of HMAC keys matching the criteria.
    # @param project_id [String] Name of the project in which to look for HMAC keys.
    # @return nil
    def hmac_keys_list(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, service_account_email : String? = nil, show_deleted_keys : Bool? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_hmac_keys_list(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_hmac_keys_list(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, max_results : Int32? = nil, page_token : String? = nil, service_account_email : String? = nil, show_deleted_keys : Bool? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ProjectsApi.hmac_keys_list ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !max_results.nil? && max_results < 0
        raise ArgumentError.new("invalid value for \"max_results\" when calling ProjectsApi.hmac_keys_list, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["maxResults"] = max_results.to_s if !max_results.nil?
      query_params["pageToken"] = page_token.to_s if !page_token.nil?
      query_params["serviceAccountEmail"] = service_account_email.to_s if !service_account_email.nil?
      query_params["showDeletedKeys"] = show_deleted_keys.to_s if !show_deleted_keys.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    # @param project_id [String] Project ID owning the service account of the updated key.
    # @param access_id [String] Name of the HMAC key being updated.
    # @return [HmacKeyMetadata]
    def hmac_keys_update(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, hmac_key_metadata : HmacKeyMetadata? = nil)
      data, _status_code, _headers = hmac_keys_update_with_http_info(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, hmac_key_metadata: hmac_key_metadata)
      data
    end

    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    # @param project_id [String] Project ID owning the service account of the updated key.
    # @param access_id [String] Name of the HMAC key being updated.
    # @return [Array<(HmacKeyMetadata, Integer, Hash)>] HmacKeyMetadata data, response status code and response headers
    def hmac_keys_update_with_http_info(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, hmac_key_metadata : HmacKeyMetadata? = nil)
      request = build_api_request_for_hmac_keys_update(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, hmac_key_metadata: hmac_key_metadata)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ProjectsApi#hmac_keys_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return HmacKeyMetadata.from_json(data), status_code, headers
    end

    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    # @param project_id [String] Project ID owning the service account of the updated key.
    # @param access_id [String] Name of the HMAC key being updated.
    # @return nil
    def hmac_keys_update(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, hmac_key_metadata : HmacKeyMetadata? = nil, &block : Crest::Response ->)
      build_api_request_for_hmac_keys_update(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, hmac_key_metadata: hmac_key_metadata).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_hmac_keys_update(*, project_id : String, access_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, hmac_key_metadata : HmacKeyMetadata? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ProjectsApi.hmac_keys_update ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys/{accessId}".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s)).sub("{" + "accessId" + "}", URI.encode_path(access_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = hmac_key_metadata.to_json

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get the email address of this project's Google Cloud Storage service account.
    # @param project_id [String] Project ID
    # @return [ServiceAccount]
    def service_account_get(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      data, _status_code, _headers = service_account_get_with_http_info(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Get the email address of this project&#39;s Google Cloud Storage service account.
    # @param project_id [String] Project ID
    # @return [Array<(ServiceAccount, Integer, Hash)>] ServiceAccount data, response status code and response headers
    def service_account_get_with_http_info(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil)
      request = build_api_request_for_service_account_get(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: ProjectsApi#service_account_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return ServiceAccount.from_json(data), status_code, headers
    end

    # Get the email address of this project&#39;s Google Cloud Storage service account.
    # @param project_id [String] Project ID
    # @return nil
    def service_account_get(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil, &block : Crest::Response ->)
      build_api_request_for_service_account_get(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_service_account_get(*, project_id : String, alt : String? = nil, fields : String? = nil, key : String? = nil, oauth_token : String? = nil, pretty_print : Bool? = nil, quota_user : String? = nil, upload_type : String? = nil, user_ip : String? = nil, user_project : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: ProjectsApi.service_account_get ..." }
      end
      allowable_values = ["json", "media"]
      if @api_client.config.client_side_validation && !alt.nil? && !allowable_values.includes?(alt)
        raise ArgumentError.new("invalid value for \"alt\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/serviceAccount".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["Oauth2", "Oauth2c"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_service_account_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
