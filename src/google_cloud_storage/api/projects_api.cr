#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/hmac_key"
require "../models/hmac_key_metadata"
require "../models/hmac_keys_metadata"

require "../models/service_account"

module GoogleCloudStorage
  class ProjectsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a new HMAC key for the specified service account.
    # @required @param project_id [String?] Project ID owning the service account.
    # @required @param service_account_email [String?] Email address of the service account.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [GoogleCloudStorage::HmacKey]
    def hmac_keys_create(
      *,
      project_id : String? = nil,
      service_account_email : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::HmacKey
      data, _status_code, _headers = hmac_keys_create_with_http_info(project_id: project_id, service_account_email: service_account_email, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Creates a new HMAC key for the specified service account.
    # @required @param project_id [String?] Project ID owning the service account.
    # @required @param service_account_email [String?] Email address of the service account.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Tuple(GoogleCloudStorage::HmacKey, Integer, Hash)] GoogleCloudStorage::HmacKey, response status code and response headers
    def hmac_keys_create_with_http_info(
      *,
      project_id : String? = nil,
      service_account_email : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::HmacKey, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_hmac_keys_create(project_id: project_id, service_account_email: service_account_email, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ProjectsApi#hmac_keys_create\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::HmacKey.from_json(body), status_code, headers)
    end

    # Creates a new HMAC key for the specified service account.
    # @required @param project_id [String?] Project ID owning the service account.
    # @required @param service_account_email [String?] Email address of the service account.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return nil
    def hmac_keys_create(
      *,
      project_id : String? = nil,
      service_account_email : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_hmac_keys_create(project_id: project_id, service_account_email: service_account_email, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_PROJECTS_HMAC_KEYS_CREATE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_hmac_keys_create(
      *,
      project_id : String? = nil,
      service_account_email : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ProjectsApi.hmac_keys_create ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project_id\" is required and cannot be null") if project_id.nil?

        raise ArgumentError.new("\"service_account_email\" is required and cannot be null") if service_account_email.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_PROJECTS_HMAC_KEYS_CREATE_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["serviceAccountEmail"] = service_account_email.to_s if !service_account_email.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_create",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Deletes an HMAC key.
    # @required @param project_id [String?] Project ID owning the requested key
    # @required @param access_id [String?] Name of the HMAC key to be deleted.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Nil]
    def hmac_keys_delete(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Nil
      hmac_keys_delete_with_http_info(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      nil
    end

    # Deletes an HMAC key.
    # @required @param project_id [String?] Project ID owning the requested key
    # @required @param access_id [String?] Name of the HMAC key to be deleted.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def hmac_keys_delete_with_http_info(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_hmac_keys_delete(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ProjectsApi#hmac_keys_delete\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Deletes an HMAC key.
    # @required @param project_id [String?] Project ID owning the requested key
    # @required @param access_id [String?] Name of the HMAC key to be deleted.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return nil
    def hmac_keys_delete(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_hmac_keys_delete(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_PROJECTS_HMAC_KEYS_DELETE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_hmac_keys_delete(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ProjectsApi.hmac_keys_delete ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project_id\" is required and cannot be null") if project_id.nil?

        raise ArgumentError.new("\"access_id\" is required and cannot be null") if access_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_PROJECTS_HMAC_KEYS_DELETE_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys/{accessId}".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s)).sub("{" + "accessId" + "}", URI.encode_path(access_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves an HMAC key's metadata
    # @required @param project_id [String?] Project ID owning the service account of the requested key.
    # @required @param access_id [String?] Name of the HMAC key.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [GoogleCloudStorage::HmacKeyMetadata]
    def hmac_keys_get(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::HmacKeyMetadata
      data, _status_code, _headers = hmac_keys_get_with_http_info(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Retrieves an HMAC key&#39;s metadata
    # @required @param project_id [String?] Project ID owning the service account of the requested key.
    # @required @param access_id [String?] Name of the HMAC key.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Tuple(GoogleCloudStorage::HmacKeyMetadata, Integer, Hash)] GoogleCloudStorage::HmacKeyMetadata, response status code and response headers
    def hmac_keys_get_with_http_info(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::HmacKeyMetadata, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_hmac_keys_get(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ProjectsApi#hmac_keys_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::HmacKeyMetadata.from_json(body), status_code, headers)
    end

    # Retrieves an HMAC key&#39;s metadata
    # @required @param project_id [String?] Project ID owning the service account of the requested key.
    # @required @param access_id [String?] Name of the HMAC key.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return nil
    def hmac_keys_get(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_hmac_keys_get(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_PROJECTS_HMAC_KEYS_GET_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_hmac_keys_get(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ProjectsApi.hmac_keys_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project_id\" is required and cannot be null") if project_id.nil?

        raise ArgumentError.new("\"access_id\" is required and cannot be null") if access_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_PROJECTS_HMAC_KEYS_GET_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys/{accessId}".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s)).sub("{" + "accessId" + "}", URI.encode_path(access_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a list of HMAC keys matching the criteria.
    # @required @param project_id [String?] Name of the project in which to look for HMAC keys.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param max_results [Int32?] Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned.
    # @optional @param page_token [String?] A previously-returned page token representing part of the larger set of results to view.
    # @optional @param service_account_email [String?] If present, only keys for the given service account are returned.
    # @optional @param show_deleted_keys [Bool?] Whether or not to show keys in the DELETED state.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [GoogleCloudStorage::HmacKeysMetadata]
    def hmac_keys_list(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      service_account_email : String? = nil,
      show_deleted_keys : Bool? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::HmacKeysMetadata
      data, _status_code, _headers = hmac_keys_list_with_http_info(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, user_project: user_project)
      data
    end

    # Retrieves a list of HMAC keys matching the criteria.
    # @required @param project_id [String?] Name of the project in which to look for HMAC keys.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param max_results [Int32?] Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned.
    # @optional @param page_token [String?] A previously-returned page token representing part of the larger set of results to view.
    # @optional @param service_account_email [String?] If present, only keys for the given service account are returned.
    # @optional @param show_deleted_keys [Bool?] Whether or not to show keys in the DELETED state.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Tuple(GoogleCloudStorage::HmacKeysMetadata, Integer, Hash)] GoogleCloudStorage::HmacKeysMetadata, response status code and response headers
    def hmac_keys_list_with_http_info(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      service_account_email : String? = nil,
      show_deleted_keys : Bool? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::HmacKeysMetadata, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_hmac_keys_list(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ProjectsApi#hmac_keys_list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::HmacKeysMetadata.from_json(body), status_code, headers)
    end

    # Retrieves a list of HMAC keys matching the criteria.
    # @required @param project_id [String?] Name of the project in which to look for HMAC keys.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param max_results [Int32?] Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned.
    # @optional @param page_token [String?] A previously-returned page token representing part of the larger set of results to view.
    # @optional @param service_account_email [String?] If present, only keys for the given service account are returned.
    # @optional @param show_deleted_keys [Bool?] Whether or not to show keys in the DELETED state.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return nil
    def hmac_keys_list(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      service_account_email : String? = nil,
      show_deleted_keys : Bool? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_hmac_keys_list(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, service_account_email: service_account_email, show_deleted_keys: show_deleted_keys, user_project: user_project).execute(&block)
    end

    STORAGE_PROJECTS_HMAC_KEYS_LIST_VALID_VALUES_FOR_ALT = String.static_array("json", "media")
    STORAGE_PROJECTS_HMAC_KEYS_LIST_MIN_FOR_MAX_RESULTS  = Int32.new("0")

    # @return Crest::Request
    def build_api_request_for_hmac_keys_list(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      service_account_email : String? = nil,
      show_deleted_keys : Bool? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ProjectsApi.hmac_keys_list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project_id\" is required and cannot be null") if project_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_PROJECTS_HMAC_KEYS_LIST_VALID_VALUES_FOR_ALT)
        end

        unless (_max_results = max_results).nil?
          OpenApi::PrimitiveValidator.validate_min_number("max_results", _max_results, STORAGE_PROJECTS_HMAC_KEYS_LIST_MIN_FOR_MAX_RESULTS)
        end
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["maxResults"] = max_results.to_s if !max_results.nil?
      query_params["pageToken"] = page_token.to_s if !page_token.nil?
      query_params["serviceAccountEmail"] = service_account_email.to_s if !service_account_email.nil?
      query_params["showDeletedKeys"] = show_deleted_keys.to_s if !show_deleted_keys.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    # @required @param project_id [String?] Project ID owning the service account of the updated key.
    # @required @param access_id [String?] Name of the HMAC key being updated.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @optional @param hmac_key_metadata [GoogleCloudStorage::HmacKeyMetadata?]
    # @return [GoogleCloudStorage::HmacKeyMetadata]
    def hmac_keys_update(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      hmac_key_metadata : GoogleCloudStorage::HmacKeyMetadata? = nil
    ) : GoogleCloudStorage::HmacKeyMetadata
      data, _status_code, _headers = hmac_keys_update_with_http_info(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, hmac_key_metadata: hmac_key_metadata)
      data
    end

    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    # @required @param project_id [String?] Project ID owning the service account of the updated key.
    # @required @param access_id [String?] Name of the HMAC key being updated.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @optional @param hmac_key_metadata [GoogleCloudStorage::HmacKeyMetadata?]
    # @return [Tuple(GoogleCloudStorage::HmacKeyMetadata, Integer, Hash)] GoogleCloudStorage::HmacKeyMetadata, response status code and response headers
    def hmac_keys_update_with_http_info(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      hmac_key_metadata : GoogleCloudStorage::HmacKeyMetadata? = nil
    ) : Tuple(GoogleCloudStorage::HmacKeyMetadata, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_hmac_keys_update(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, hmac_key_metadata: hmac_key_metadata)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ProjectsApi#hmac_keys_update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::HmacKeyMetadata.from_json(body), status_code, headers)
    end

    # Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
    # @required @param project_id [String?] Project ID owning the service account of the updated key.
    # @required @param access_id [String?] Name of the HMAC key being updated.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @optional @param hmac_key_metadata [GoogleCloudStorage::HmacKeyMetadata?]
    # @return nil
    def hmac_keys_update(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      hmac_key_metadata : GoogleCloudStorage::HmacKeyMetadata? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_hmac_keys_update(project_id: project_id, access_id: access_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, hmac_key_metadata: hmac_key_metadata).execute(&block)
    end

    STORAGE_PROJECTS_HMAC_KEYS_UPDATE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_hmac_keys_update(
      *,
      project_id : String? = nil,
      access_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      hmac_key_metadata : GoogleCloudStorage::HmacKeyMetadata? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ProjectsApi.hmac_keys_update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project_id\" is required and cannot be null") if project_id.nil?

        raise ArgumentError.new("\"access_id\" is required and cannot be null") if access_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_PROJECTS_HMAC_KEYS_UPDATE_VALID_VALUES_FOR_ALT)
        end

        unless (_hmac_key_metadata = hmac_key_metadata).nil?
          _hmac_key_metadata.validate if _hmac_key_metadata.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/hmacKeys/{accessId}".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s)).sub("{" + "accessId" + "}", URI.encode_path(access_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: hmac_key_metadata, content_type: header_params["Content-Type"]?) if !hmac_key_metadata.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_hmac_keys_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Get the email address of this project's Google Cloud Storage service account.
    # @required @param project_id [String?] Project ID
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [GoogleCloudStorage::ServiceAccount]
    def service_account_get(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::ServiceAccount
      data, _status_code, _headers = service_account_get_with_http_info(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Get the email address of this project&#39;s Google Cloud Storage service account.
    # @required @param project_id [String?] Project ID
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Tuple(GoogleCloudStorage::ServiceAccount, Integer, Hash)] GoogleCloudStorage::ServiceAccount, response status code and response headers
    def service_account_get_with_http_info(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::ServiceAccount, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_service_account_get(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: ProjectsApi#service_account_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::ServiceAccount.from_json(body), status_code, headers)
    end

    # Get the email address of this project&#39;s Google Cloud Storage service account.
    # @required @param project_id [String?] Project ID
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return nil
    def service_account_get(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_service_account_get(project_id: project_id, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_PROJECTS_SERVICE_ACCOUNT_GET_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_service_account_get(
      *,
      project_id : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: ProjectsApi.service_account_get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project_id\" is required and cannot be null") if project_id.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_PROJECTS_SERVICE_ACCOUNT_GET_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/projects/{projectId}/serviceAccount".sub("{" + "projectId" + "}", URI.encode_path(project_id.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "ProjectsApi.storage_projects_service_account_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
