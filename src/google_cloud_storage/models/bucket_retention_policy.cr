#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleCloudStorage
  # The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class BucketRetentionPolicy
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    # Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
    @[JSON::Field(key: "effectiveTime", type: Time?, converter: Time::RFC3339Converter, presence: true, ignore_serialize: effective_time.nil? && !effective_time_present?)]
    property effective_time : Time?

    @[JSON::Field(ignore: true)]
    property? effective_time_present : Bool = false

    # Once locked, an object retention policy cannot be modified.
    @[JSON::Field(key: "isLocked", type: Bool?, presence: true, ignore_serialize: is_locked.nil? && !is_locked_present?)]
    property is_locked : Bool?

    @[JSON::Field(ignore: true)]
    property? is_locked_present : Bool = false

    # The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
    @[JSON::Field(key: "retentionPeriod", type: String?, presence: true, ignore_serialize: retention_period.nil? && !retention_period_present?)]
    property retention_period : String?

    @[JSON::Field(ignore: true)]
    property? retention_period_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @effective_time : Time? = nil, @is_locked : Bool? = nil, @retention_period : String? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        effective_time == o.effective_time &&
        is_locked == o.is_locked &&
        retention_period == o.retention_period
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [effective_time, is_locked, retention_period].hash
    end
  end
end
