#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.3.1-SNAPSHOT
#

require "nason"
require "time"
require "log"

module GoogleCloudStorage
  # An object.
  class Object
    include NASON::Serializable

    # Optional properties
    # Access controls on the object.
    @[NASON::Field(key: "acl", type: Array(ObjectAccessControl)?, nillable: true)]
    property acl : Array(ObjectAccessControl)?

    # The name of the bucket containing this object.
    @[NASON::Field(key: "bucket", type: String?, nillable: true)]
    property bucket : String?

    # Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
    @[NASON::Field(key: "cacheControl", type: String?, nillable: true)]
    property cache_control : String?

    # Number of underlying components that make up this object. Components are accumulated by compose operations.
    @[NASON::Field(key: "componentCount", type: Int32?, nillable: true)]
    property component_count : Int32?

    # Content-Disposition of the object data.
    @[NASON::Field(key: "contentDisposition", type: String?, nillable: true)]
    property content_disposition : String?

    # Content-Encoding of the object data.
    @[NASON::Field(key: "contentEncoding", type: String?, nillable: true)]
    property content_encoding : String?

    # Content-Language of the object data.
    @[NASON::Field(key: "contentLanguage", type: String?, nillable: true)]
    property content_language : String?

    # Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
    @[NASON::Field(key: "contentType", type: String?, nillable: true)]
    property content_type : String?

    # CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
    @[NASON::Field(key: "crc32c", type: String?, nillable: true)]
    property crc32c : String?

    # A timestamp in RFC 3339 format specified by the user for an object.
    @[NASON::Field(key: "customTime", type: Time?, converter: Time::RFC3339Converter, nillable: true)]
    property custom_time : Time?

    @[NASON::Field(key: "customerEncryption", type: ObjectCustomerEncryption?, nillable: true)]
    property customer_encryption : ObjectCustomerEncryption?

    # HTTP 1.1 Entity tag for the object.
    @[NASON::Field(key: "etag", type: String?, nillable: true)]
    property etag : String?

    # Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
    @[NASON::Field(key: "eventBasedHold", type: Bool?, nillable: true)]
    property event_based_hold : Bool?

    # The content generation of this object. Used for object versioning.
    @[NASON::Field(key: "generation", type: String?, nillable: true)]
    property generation : String?

    # The ID of the object, including the bucket name, object name, and generation number.
    @[NASON::Field(key: "id", type: String?, nillable: true)]
    property id : String?

    # The kind of item this is. For objects, this is always storage#object.
    @[NASON::Field(key: "kind", type: String?, default: "storage#object", nillable: true)]
    property kind : String?

    # Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
    @[NASON::Field(key: "kmsKeyName", type: String?, nillable: true)]
    property kms_key_name : String?

    # MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
    @[NASON::Field(key: "md5Hash", type: String?, nillable: true)]
    property md5_hash : String?

    # Media download link.
    @[NASON::Field(key: "mediaLink", type: String?, nillable: true)]
    property media_link : String?

    # User-provided metadata, in key/value pairs.
    @[NASON::Field(key: "metadata", type: Hash(String, String)?, nillable: true)]
    property metadata : Hash(String, String)?

    # The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
    @[NASON::Field(key: "metageneration", type: String?, nillable: true)]
    property metageneration : String?

    # The name of the object. Required if not specified by URL parameter.
    @[NASON::Field(key: "name", type: String?, nillable: true)]
    property name : String?

    @[NASON::Field(key: "owner", type: ObjectOwner?, nillable: true)]
    property owner : ObjectOwner?

    # A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
    @[NASON::Field(key: "retentionExpirationTime", type: Time?, converter: Time::RFC3339Converter, nillable: true)]
    property retention_expiration_time : Time?

    # The link to this object.
    @[NASON::Field(key: "selfLink", type: String?, nillable: true)]
    property self_link : String?

    # Content-Length of the data in bytes.
    @[NASON::Field(key: "size", type: String?, nillable: true)]
    property size : String?

    # Storage class of the object.
    @[NASON::Field(key: "storageClass", type: String?, nillable: true)]
    property storage_class : String?

    # Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
    @[NASON::Field(key: "temporaryHold", type: Bool?, nillable: true)]
    property temporary_hold : Bool?

    # The creation time of the object in RFC 3339 format.
    @[NASON::Field(key: "timeCreated", type: Time?, converter: Time::RFC3339Converter, nillable: true)]
    property time_created : Time?

    # The deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
    @[NASON::Field(key: "timeDeleted", type: Time?, converter: Time::RFC3339Converter, nillable: true)]
    property time_deleted : Time?

    # The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
    @[NASON::Field(key: "timeStorageClassUpdated", type: Time?, converter: Time::RFC3339Converter, nillable: true)]
    property time_storage_class_updated : Time?

    # The modification time of the object metadata in RFC 3339 format.
    @[NASON::Field(key: "updated", type: Time?, converter: Time::RFC3339Converter, nillable: true)]
    property updated : Time?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @acl : Array(ObjectAccessControl)? = nil, @bucket : String? = nil, @cache_control : String? = nil, @component_count : Int32? = nil, @content_disposition : String? = nil, @content_encoding : String? = nil, @content_language : String? = nil, @content_type : String? = nil, @crc32c : String? = nil, @custom_time : Time? = nil, @customer_encryption : ObjectCustomerEncryption? = nil, @etag : String? = nil, @event_based_hold : Bool? = nil, @generation : String? = nil, @id : String? = nil, @kind : String? = "storage#object", @kms_key_name : String? = nil, @md5_hash : String? = nil, @media_link : String? = nil, @metadata : Hash(String, String)? = nil, @metageneration : String? = nil, @name : String? = nil, @owner : ObjectOwner? = nil, @retention_expiration_time : Time? = nil, @self_link : String? = nil, @size : String? = nil, @storage_class : String? = nil, @temporary_hold : Bool? = nil, @time_created : Time? = nil, @time_deleted : Time? = nil, @time_storage_class_updated : Time? = nil, @updated : Time? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        acl == o.acl &&
        bucket == o.bucket &&
        cache_control == o.cache_control &&
        component_count == o.component_count &&
        content_disposition == o.content_disposition &&
        content_encoding == o.content_encoding &&
        content_language == o.content_language &&
        content_type == o.content_type &&
        crc32c == o.crc32c &&
        custom_time == o.custom_time &&
        customer_encryption == o.customer_encryption &&
        etag == o.etag &&
        event_based_hold == o.event_based_hold &&
        generation == o.generation &&
        id == o.id &&
        kind == o.kind &&
        kms_key_name == o.kms_key_name &&
        md5_hash == o.md5_hash &&
        media_link == o.media_link &&
        metadata == o.metadata &&
        metageneration == o.metageneration &&
        name == o.name &&
        owner == o.owner &&
        retention_expiration_time == o.retention_expiration_time &&
        self_link == o.self_link &&
        size == o.size &&
        storage_class == o.storage_class &&
        temporary_hold == o.temporary_hold &&
        time_created == o.time_created &&
        time_deleted == o.time_deleted &&
        time_storage_class_updated == o.time_storage_class_updated &&
        updated == o.updated
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [acl, bucket, cache_control, component_count, content_disposition, content_encoding, content_language, content_type, crc32c, custom_time, customer_encryption, etag, event_based_hold, generation, id, kind, kms_key_name, md5_hash, media_link, metadata, metageneration, name, owner, retention_expiration_time, self_link, size, storage_class, temporary_hold, time_created, time_deleted, time_storage_class_updated, updated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of String => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GoogleCloudStorage.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of String => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of String => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
