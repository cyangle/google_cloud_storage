#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module GoogleCloudStorage
  # Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
  @[JSON::Serializable::Options(emit_nulls: true)]
  class ObjectCustomerEncryption
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    # The encryption algorithm.
    @[JSON::Field(key: "encryptionAlgorithm", type: String?, presence: true, ignore_serialize: encryption_algorithm.nil? && !encryption_algorithm_present?)]
    property encryption_algorithm : String?

    @[JSON::Field(ignore: true)]
    property? encryption_algorithm_present : Bool = false

    # SHA256 hash value of the encryption key.
    @[JSON::Field(key: "keySha256", type: String?, presence: true, ignore_serialize: key_sha256.nil? && !key_sha256_present?)]
    property key_sha256 : String?

    @[JSON::Field(ignore: true)]
    property? key_sha256_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @encryption_algorithm : String? = nil,
      @key_sha256 : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@encryption_algorithm, @encryption_algorithm_present, @key_sha256, @key_sha256_present)
  end
end
