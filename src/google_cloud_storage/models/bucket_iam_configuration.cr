#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./bucket_iam_configuration_bucket_policy_only"
require "./bucket_iam_configuration_uniform_bucket_level_access"

module GoogleCloudStorage
  # The bucket's IAM configuration.
  class BucketIamConfiguration
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "bucketPolicyOnly", type: GoogleCloudStorage::BucketIamConfigurationBucketPolicyOnly?, default: nil, required: false, nullable: false, emit_null: false)]
    getter bucket_policy_only : GoogleCloudStorage::BucketIamConfigurationBucketPolicyOnly? = nil

    # The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported.
    @[JSON::Field(key: "publicAccessPrevention", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter public_access_prevention : String? = nil

    @[JSON::Field(key: "uniformBucketLevelAccess", type: GoogleCloudStorage::BucketIamConfigurationUniformBucketLevelAccess?, default: nil, required: false, nullable: false, emit_null: false)]
    getter uniform_bucket_level_access : GoogleCloudStorage::BucketIamConfigurationUniformBucketLevelAccess? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @bucket_policy_only : GoogleCloudStorage::BucketIamConfigurationBucketPolicyOnly? = nil,
      @public_access_prevention : String? = nil,
      @uniform_bucket_level_access : GoogleCloudStorage::BucketIamConfigurationUniformBucketLevelAccess? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_bucket_policy_only = @bucket_policy_only).nil?
        invalid_properties.concat(_bucket_policy_only.list_invalid_properties_for("bucket_policy_only")) if _bucket_policy_only.is_a?(OpenApi::Validatable)
      end

      unless (_uniform_bucket_level_access = @uniform_bucket_level_access).nil?
        invalid_properties.concat(_uniform_bucket_level_access.list_invalid_properties_for("uniform_bucket_level_access")) if _uniform_bucket_level_access.is_a?(OpenApi::Validatable)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_bucket_policy_only = @bucket_policy_only).nil?
        return false if _bucket_policy_only.is_a?(OpenApi::Validatable) && !_bucket_policy_only.valid?
      end

      unless (_uniform_bucket_level_access = @uniform_bucket_level_access).nil?
        return false if _uniform_bucket_level_access.is_a?(OpenApi::Validatable) && !_uniform_bucket_level_access.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bucket_policy_only Object to be assigned
    def bucket_policy_only=(new_value : GoogleCloudStorage::BucketIamConfigurationBucketPolicyOnly?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @bucket_policy_only = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] public_access_prevention Object to be assigned
    def public_access_prevention=(new_value : String?)
      @public_access_prevention = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uniform_bucket_level_access Object to be assigned
    def uniform_bucket_level_access=(new_value : GoogleCloudStorage::BucketIamConfigurationUniformBucketLevelAccess?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @uniform_bucket_level_access = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@bucket_policy_only, @public_access_prevention, @uniform_bucket_level_access)
  end
end
