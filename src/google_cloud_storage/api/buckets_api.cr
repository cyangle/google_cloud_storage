#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/bucket"
require "../models/buckets"

require "../models/policy"
require "../models/test_iam_permissions_response"

module GoogleCloudStorage
  class BucketsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Permanently deletes an empty bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] If set, only deletes the bucket if its metageneration matches this value.
    # @optional @param if_metageneration_not_match [String?] If set, only deletes the bucket if its metageneration does not match this value.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Nil]
    def delete(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      user_project : String? = nil
    ) : Nil
      delete_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, user_project: user_project)
      nil
    end

    # Permanently deletes an empty bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] If set, only deletes the bucket if its metageneration matches this value.
    # @optional @param if_metageneration_not_match [String?] If set, only deletes the bucket if its metageneration does not match this value.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      user_project : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#delete\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Permanently deletes an empty bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] If set, only deletes the bucket if its metageneration matches this value.
    # @optional @param if_metageneration_not_match [String?] If set, only deletes the bucket if its metageneration does not match this value.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def delete(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKETS_DELETE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_delete(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.delete ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_DELETE_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns metadata for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::Bucket]
    def get(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      projection : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::Bucket
      data, _status_code, _headers = get_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, user_project: user_project)
      data
    end

    # Returns metadata for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::Bucket, Integer, Hash)] GoogleCloudStorage::Bucket, response status code and response headers
    def get_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      projection : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::Bucket, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Bucket.from_json(body), status_code, headers)
    end

    # Returns metadata for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def get(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, projection: projection, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKETS_GET_VALID_VALUES_FOR_ALT        = String.static_array("json", "media")
    STORAGE_BUCKETS_GET_VALID_VALUES_FOR_PROJECTION = String.static_array("full", "noAcl")

    # @return Crest::Request
    def build_api_request_for_get(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      projection : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_GET_VALID_VALUES_FOR_ALT)
        end

        unless (_projection = projection).nil?
          OpenApi::EnumValidator.validate("projection", _projection, STORAGE_BUCKETS_GET_VALID_VALUES_FOR_PROJECTION)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil?
      query_params["projection"] = projection.to_s if !projection.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns an IAM policy for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param options_requested_policy_version [Int32?] The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::Policy]
    def get_iam_policy(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      options_requested_policy_version : Int32? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::Policy
      data, _status_code, _headers = get_iam_policy_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, options_requested_policy_version: options_requested_policy_version, user_project: user_project)
      data
    end

    # Returns an IAM policy for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param options_requested_policy_version [Int32?] The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::Policy, Integer, Hash)] GoogleCloudStorage::Policy, response status code and response headers
    def get_iam_policy_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      options_requested_policy_version : Int32? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::Policy, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, options_requested_policy_version: options_requested_policy_version, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#get_iam_policy\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Policy.from_json(body), status_code, headers)
    end

    # Returns an IAM policy for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param options_requested_policy_version [Int32?] The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def get_iam_policy(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      options_requested_policy_version : Int32? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, options_requested_policy_version: options_requested_policy_version, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKETS_GET_IAM_POLICY_VALID_VALUES_FOR_ALT                     = String.static_array("json", "media")
    STORAGE_BUCKETS_GET_IAM_POLICY_MIN_FOR_OPTIONS_REQUESTED_POLICY_VERSION = Int32.new("1")

    # @return Crest::Request
    def build_api_request_for_get_iam_policy(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      options_requested_policy_version : Int32? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.get_iam_policy ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_GET_IAM_POLICY_VALID_VALUES_FOR_ALT)
        end

        unless (_options_requested_policy_version = options_requested_policy_version).nil?
          OpenApi::PrimitiveValidator.validate_min_number("options_requested_policy_version", _options_requested_policy_version, STORAGE_BUCKETS_GET_IAM_POLICY_MIN_FOR_OPTIONS_REQUESTED_POLICY_VERSION)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/iam".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["optionsRequestedPolicyVersion"] = options_requested_policy_version.to_s if !options_requested_policy_version.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_get_iam_policy",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Creates a new bucket.
    # @required @param project [String?] A valid API project identifier.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @optional @param bucket [GoogleCloudStorage::Bucket?]
    # @return [GoogleCloudStorage::Bucket]
    def insert(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket : GoogleCloudStorage::Bucket? = nil
    ) : GoogleCloudStorage::Bucket
      data, _status_code, _headers = insert_with_http_info(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket: bucket)
      data
    end

    # Creates a new bucket.
    # @required @param project [String?] A valid API project identifier.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @optional @param bucket [GoogleCloudStorage::Bucket?]
    # @return [Tuple(GoogleCloudStorage::Bucket, Integer, Hash)] GoogleCloudStorage::Bucket, response status code and response headers
    def insert_with_http_info(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket : GoogleCloudStorage::Bucket? = nil
    ) : Tuple(GoogleCloudStorage::Bucket, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_insert(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket: bucket)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#insert\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Bucket.from_json(body), status_code, headers)
    end

    # Creates a new bucket.
    # @required @param project [String?] A valid API project identifier.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @optional @param bucket [GoogleCloudStorage::Bucket?]
    # @return nil
    def insert(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket : GoogleCloudStorage::Bucket? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_insert(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket: bucket).execute(&block)
    end

    STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_ALT                           = String.static_array("json", "media")
    STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_PREDEFINED_ACL                = String.static_array("authenticatedRead", "private", "projectPrivate", "publicRead", "publicReadWrite")
    STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_PREDEFINED_DEFAULT_OBJECT_ACL = String.static_array("authenticatedRead", "bucketOwnerFullControl", "bucketOwnerRead", "private", "projectPrivate", "publicRead")
    STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_PROJECTION                    = String.static_array("full", "noAcl")

    # @return Crest::Request
    def build_api_request_for_insert(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket : GoogleCloudStorage::Bucket? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.insert ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project\" is required and cannot be null") if project.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_ALT)
        end

        unless (_predefined_acl = predefined_acl).nil?
          OpenApi::EnumValidator.validate("predefined_acl", _predefined_acl, STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_PREDEFINED_ACL)
        end
        unless (_predefined_default_object_acl = predefined_default_object_acl).nil?
          OpenApi::EnumValidator.validate("predefined_default_object_acl", _predefined_default_object_acl, STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_PREDEFINED_DEFAULT_OBJECT_ACL)
        end
        unless (_projection = projection).nil?
          OpenApi::EnumValidator.validate("projection", _projection, STORAGE_BUCKETS_INSERT_VALID_VALUES_FOR_PROJECTION)
        end

        unless (_bucket = bucket).nil?
          _bucket.validate if _bucket.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["project"] = project.to_s if !project.nil?
      query_params["predefinedAcl"] = predefined_acl.to_s if !predefined_acl.nil?
      query_params["predefinedDefaultObjectAcl"] = predefined_default_object_acl.to_s if !predefined_default_object_acl.nil?
      query_params["projection"] = projection.to_s if !projection.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bucket, content_type: header_params["Content-Type"]?) if !bucket.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_insert",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves a list of buckets for a given project.
    # @required @param project [String?] A valid API project identifier.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param max_results [Int32?] Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
    # @optional @param page_token [String?] A previously-returned page token representing part of the larger set of results to view.
    # @optional @param prefix [String?] Filter results to buckets whose names begin with this prefix.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [GoogleCloudStorage::Buckets]
    def list(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      prefix : String? = nil,
      projection : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::Buckets
      data, _status_code, _headers = list_with_http_info(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, user_project: user_project)
      data
    end

    # Retrieves a list of buckets for a given project.
    # @required @param project [String?] A valid API project identifier.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param max_results [Int32?] Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
    # @optional @param page_token [String?] A previously-returned page token representing part of the larger set of results to view.
    # @optional @param prefix [String?] Filter results to buckets whose names begin with this prefix.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return [Tuple(GoogleCloudStorage::Buckets, Integer, Hash)] GoogleCloudStorage::Buckets, response status code and response headers
    def list_with_http_info(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      prefix : String? = nil,
      projection : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::Buckets, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Buckets.from_json(body), status_code, headers)
    end

    # Retrieves a list of buckets for a given project.
    # @required @param project [String?] A valid API project identifier.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param max_results [Int32?] Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
    # @optional @param page_token [String?] A previously-returned page token representing part of the larger set of results to view.
    # @optional @param prefix [String?] Filter results to buckets whose names begin with this prefix.
    # @optional @param projection [String?] Set of properties to return. Defaults to noAcl.
    # @optional @param user_project [String?] The project to be billed for this request.
    # @return nil
    def list(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      prefix : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list(project: project, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, max_results: max_results, page_token: page_token, prefix: prefix, projection: projection, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKETS_LIST_VALID_VALUES_FOR_ALT        = String.static_array("json", "media")
    STORAGE_BUCKETS_LIST_MIN_FOR_MAX_RESULTS         = Int32.new("0")
    STORAGE_BUCKETS_LIST_VALID_VALUES_FOR_PROJECTION = String.static_array("full", "noAcl")

    # @return Crest::Request
    def build_api_request_for_list(
      *,
      project : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      max_results : Int32? = nil,
      page_token : String? = nil,
      prefix : String? = nil,
      projection : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"project\" is required and cannot be null") if project.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_LIST_VALID_VALUES_FOR_ALT)
        end

        unless (_max_results = max_results).nil?
          OpenApi::PrimitiveValidator.validate_min_number("max_results", _max_results, STORAGE_BUCKETS_LIST_MIN_FOR_MAX_RESULTS)
        end

        unless (_projection = projection).nil?
          OpenApi::EnumValidator.validate("projection", _projection, STORAGE_BUCKETS_LIST_VALID_VALUES_FOR_PROJECTION)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["project"] = project.to_s if !project.nil?
      query_params["maxResults"] = max_results.to_s if !max_results.nil?
      query_params["pageToken"] = page_token.to_s if !page_token.nil?
      query_params["prefix"] = prefix.to_s if !prefix.nil?
      query_params["projection"] = projection.to_s if !projection.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Locks retention policy on a bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param if_metageneration_match [String?] Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::Bucket]
    def lock_retention_policy(
      *,
      bucket : String? = nil,
      if_metageneration_match : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::Bucket
      data, _status_code, _headers = lock_retention_policy_with_http_info(bucket: bucket, if_metageneration_match: if_metageneration_match, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Locks retention policy on a bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param if_metageneration_match [String?] Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::Bucket, Integer, Hash)] GoogleCloudStorage::Bucket, response status code and response headers
    def lock_retention_policy_with_http_info(
      *,
      bucket : String? = nil,
      if_metageneration_match : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::Bucket, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_lock_retention_policy(bucket: bucket, if_metageneration_match: if_metageneration_match, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#lock_retention_policy\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Bucket.from_json(body), status_code, headers)
    end

    # Locks retention policy on a bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param if_metageneration_match [String?] Makes the operation conditional on whether bucket's current metageneration matches the given value.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def lock_retention_policy(
      *,
      bucket : String? = nil,
      if_metageneration_match : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_lock_retention_policy(bucket: bucket, if_metageneration_match: if_metageneration_match, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKETS_LOCK_RETENTION_POLICY_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_lock_retention_policy(
      *,
      bucket : String? = nil,
      if_metageneration_match : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.lock_retention_policy ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        raise ArgumentError.new("\"if_metageneration_match\" is required and cannot be null") if if_metageneration_match.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_LOCK_RETENTION_POLICY_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/lockRetentionPolicy".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_lock_retention_policy",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket2 [GoogleCloudStorage::Bucket?]
    # @return [GoogleCloudStorage::Bucket]
    def patch(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil
    ) : GoogleCloudStorage::Bucket
      data, _status_code, _headers = patch_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket2: bucket2)
      data
    end

    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket2 [GoogleCloudStorage::Bucket?]
    # @return [Tuple(GoogleCloudStorage::Bucket, Integer, Hash)] GoogleCloudStorage::Bucket, response status code and response headers
    def patch_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil
    ) : Tuple(GoogleCloudStorage::Bucket, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_patch(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket2: bucket2)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#patch\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Bucket.from_json(body), status_code, headers)
    end

    # Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket2 [GoogleCloudStorage::Bucket?]
    # @return nil
    def patch(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_patch(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket2: bucket2).execute(&block)
    end

    STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_ALT                           = String.static_array("json", "media")
    STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_PREDEFINED_ACL                = String.static_array("authenticatedRead", "private", "projectPrivate", "publicRead", "publicReadWrite")
    STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_PREDEFINED_DEFAULT_OBJECT_ACL = String.static_array("authenticatedRead", "bucketOwnerFullControl", "bucketOwnerRead", "private", "projectPrivate", "publicRead")
    STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_PROJECTION                    = String.static_array("full", "noAcl")

    # @return Crest::Request
    def build_api_request_for_patch(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.patch ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_ALT)
        end

        unless (_predefined_acl = predefined_acl).nil?
          OpenApi::EnumValidator.validate("predefined_acl", _predefined_acl, STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_PREDEFINED_ACL)
        end
        unless (_predefined_default_object_acl = predefined_default_object_acl).nil?
          OpenApi::EnumValidator.validate("predefined_default_object_acl", _predefined_default_object_acl, STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_PREDEFINED_DEFAULT_OBJECT_ACL)
        end
        unless (_projection = projection).nil?
          OpenApi::EnumValidator.validate("projection", _projection, STORAGE_BUCKETS_PATCH_VALID_VALUES_FOR_PROJECTION)
        end

        unless (_bucket2 = bucket2).nil?
          _bucket2.validate if _bucket2.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil?
      query_params["predefinedAcl"] = predefined_acl.to_s if !predefined_acl.nil?
      query_params["predefinedDefaultObjectAcl"] = predefined_default_object_acl.to_s if !predefined_default_object_acl.nil?
      query_params["projection"] = projection.to_s if !projection.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bucket2, content_type: header_params["Content-Type"]?) if !bucket2.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"PATCH",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_patch",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates an IAM policy for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param policy [GoogleCloudStorage::Policy?]
    # @return [GoogleCloudStorage::Policy]
    def set_iam_policy(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      policy : GoogleCloudStorage::Policy? = nil
    ) : GoogleCloudStorage::Policy
      data, _status_code, _headers = set_iam_policy_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, policy: policy)
      data
    end

    # Updates an IAM policy for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param policy [GoogleCloudStorage::Policy?]
    # @return [Tuple(GoogleCloudStorage::Policy, Integer, Hash)] GoogleCloudStorage::Policy, response status code and response headers
    def set_iam_policy_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      policy : GoogleCloudStorage::Policy? = nil
    ) : Tuple(GoogleCloudStorage::Policy, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_set_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, policy: policy)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#set_iam_policy\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Policy.from_json(body), status_code, headers)
    end

    # Updates an IAM policy for the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param policy [GoogleCloudStorage::Policy?]
    # @return nil
    def set_iam_policy(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      policy : GoogleCloudStorage::Policy? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_set_iam_policy(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, policy: policy).execute(&block)
    end

    STORAGE_BUCKETS_SET_IAM_POLICY_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_set_iam_policy(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      policy : GoogleCloudStorage::Policy? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.set_iam_policy ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_SET_IAM_POLICY_VALID_VALUES_FOR_ALT)
        end

        unless (_policy = policy).nil?
          _policy.validate if _policy.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/iam".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: policy, content_type: header_params["Content-Type"]?) if !policy.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_set_iam_policy",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param permissions [Array(String)?] Permissions to test.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::TestIamPermissionsResponse]
    def test_iam_permissions(
      *,
      bucket : String? = nil,
      permissions : Array(String)? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::TestIamPermissionsResponse
      data, _status_code, _headers = test_iam_permissions_with_http_info(bucket: bucket, permissions: permissions, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param permissions [Array(String)?] Permissions to test.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::TestIamPermissionsResponse, Integer, Hash)] GoogleCloudStorage::TestIamPermissionsResponse, response status code and response headers
    def test_iam_permissions_with_http_info(
      *,
      bucket : String? = nil,
      permissions : Array(String)? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::TestIamPermissionsResponse, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_iam_permissions(bucket: bucket, permissions: permissions, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#test_iam_permissions\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::TestIamPermissionsResponse.from_json(body), status_code, headers)
    end

    # Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param permissions [Array(String)?] Permissions to test.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def test_iam_permissions(
      *,
      bucket : String? = nil,
      permissions : Array(String)? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_iam_permissions(bucket: bucket, permissions: permissions, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKETS_TEST_IAM_PERMISSIONS_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_test_iam_permissions(
      *,
      bucket : String? = nil,
      permissions : Array(String)? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.test_iam_permissions ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        raise ArgumentError.new("\"permissions\" is required and cannot be null") if permissions.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_TEST_IAM_PERMISSIONS_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/iam/testPermissions".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["permissions"] = @api_client.build_collection_param(permissions, "multi") if !permissions.nil? && !permissions.empty?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_test_iam_permissions",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket2 [GoogleCloudStorage::Bucket?]
    # @return [GoogleCloudStorage::Bucket]
    def update(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil
    ) : GoogleCloudStorage::Bucket
      data, _status_code, _headers = update_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket2: bucket2)
      data
    end

    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket2 [GoogleCloudStorage::Bucket?]
    # @return [Tuple(GoogleCloudStorage::Bucket, Integer, Hash)] GoogleCloudStorage::Bucket, response status code and response headers
    def update_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil
    ) : Tuple(GoogleCloudStorage::Bucket, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket2: bucket2)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketsApi#update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::Bucket.from_json(body), status_code, headers)
    end

    # Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param if_metageneration_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
    # @optional @param if_metageneration_not_match [String?] Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
    # @optional @param predefined_acl [String?] Apply a predefined set of access controls to this bucket.
    # @optional @param predefined_default_object_acl [String?] Apply a predefined set of default object access controls to this bucket.
    # @optional @param projection [String?] Set of properties to return. Defaults to full.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket2 [GoogleCloudStorage::Bucket?]
    # @return nil
    def update(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, if_metageneration_match: if_metageneration_match, if_metageneration_not_match: if_metageneration_not_match, predefined_acl: predefined_acl, predefined_default_object_acl: predefined_default_object_acl, projection: projection, user_project: user_project, bucket2: bucket2).execute(&block)
    end

    STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_ALT                           = String.static_array("json", "media")
    STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_PREDEFINED_ACL                = String.static_array("authenticatedRead", "private", "projectPrivate", "publicRead", "publicReadWrite")
    STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_PREDEFINED_DEFAULT_OBJECT_ACL = String.static_array("authenticatedRead", "bucketOwnerFullControl", "bucketOwnerRead", "private", "projectPrivate", "publicRead")
    STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_PROJECTION                    = String.static_array("full", "noAcl")

    # @return Crest::Request
    def build_api_request_for_update(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      if_metageneration_match : String? = nil,
      if_metageneration_not_match : String? = nil,
      predefined_acl : String? = nil,
      predefined_default_object_acl : String? = nil,
      projection : String? = nil,
      user_project : String? = nil,
      bucket2 : GoogleCloudStorage::Bucket? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketsApi.update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_ALT)
        end

        unless (_predefined_acl = predefined_acl).nil?
          OpenApi::EnumValidator.validate("predefined_acl", _predefined_acl, STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_PREDEFINED_ACL)
        end
        unless (_predefined_default_object_acl = predefined_default_object_acl).nil?
          OpenApi::EnumValidator.validate("predefined_default_object_acl", _predefined_default_object_acl, STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_PREDEFINED_DEFAULT_OBJECT_ACL)
        end
        unless (_projection = projection).nil?
          OpenApi::EnumValidator.validate("projection", _projection, STORAGE_BUCKETS_UPDATE_VALID_VALUES_FOR_PROJECTION)
        end

        unless (_bucket2 = bucket2).nil?
          _bucket2.validate if _bucket2.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["ifMetagenerationMatch"] = if_metageneration_match.to_s if !if_metageneration_match.nil?
      query_params["ifMetagenerationNotMatch"] = if_metageneration_not_match.to_s if !if_metageneration_not_match.nil?
      query_params["predefinedAcl"] = predefined_acl.to_s if !predefined_acl.nil?
      query_params["predefinedDefaultObjectAcl"] = predefined_default_object_acl.to_s if !predefined_default_object_acl.nil?
      query_params["projection"] = projection.to_s if !projection.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bucket2, content_type: header_params["Content-Type"]?) if !bucket2.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "BucketsApi.storage_buckets_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
