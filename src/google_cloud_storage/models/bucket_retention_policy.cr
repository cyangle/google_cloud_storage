#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleCloudStorage
  # The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
  class BucketRetentionPolicy
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
    @[JSON::Field(key: "effectiveTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter effective_time : Time? = nil

    # Once locked, an object retention policy cannot be modified.
    @[JSON::Field(key: "isLocked", type: Bool?, default: nil, required: false, nullable: false, emit_null: false)]
    getter is_locked : Bool? = nil

    # The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
    @[JSON::Field(key: "retentionPeriod", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter retention_period : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @effective_time : Time? = nil,
      @is_locked : Bool? = nil,
      @retention_period : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] effective_time Object to be assigned
    def effective_time=(new_value : Time?)
      @effective_time = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] is_locked Object to be assigned
    def is_locked=(new_value : Bool?)
      @is_locked = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] retention_period Object to be assigned
    def retention_period=(new_value : String?)
      @retention_period = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@effective_time, @is_locked, @retention_period)
  end
end
