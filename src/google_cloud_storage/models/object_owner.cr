#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleCloudStorage
  # The owner of the object. This will always be the uploader of the object.
  class ObjectOwner
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # The entity, in the form user-userId.
    @[JSON::Field(key: "entity", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter entity : String? = nil

    # The ID for the entity.
    @[JSON::Field(key: "entityId", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter entity_id : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @entity : String? = nil,
      @entity_id : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity Object to be assigned
    def entity=(new_value : String?)
      @entity = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_id Object to be assigned
    def entity_id=(new_value : String?)
      @entity_id = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@entity, @entity_id)
  end
end
