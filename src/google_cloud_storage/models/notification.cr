#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module GoogleCloudStorage
  # A subscription to receive Google PubSub notifications.
  class Notification
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
    @[JSON::Field(key: "custom_attributes", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter custom_attributes : Hash(String, String)? = nil

    # HTTP 1.1 Entity tag for this subscription notification.
    @[JSON::Field(key: "etag", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter etag : String? = nil

    # If present, only send notifications about listed event types. If empty, sent notifications for all event types.
    @[JSON::Field(key: "event_types", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter event_types : Array(String)? = nil

    # The ID of the notification.
    @[JSON::Field(key: "id", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : String? = nil

    # The kind of item this is. For notifications, this is always storage#notification.
    @[JSON::Field(key: "kind", type: String?, default: "storage#notification", required: false, nullable: false, emit_null: false)]
    getter kind : String? = "storage#notification"

    # If present, only apply this notification configuration to object names that begin with this prefix.
    @[JSON::Field(key: "object_name_prefix", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter object_name_prefix : String? = nil

    # The desired content of the Payload.
    @[JSON::Field(key: "payload_format", type: String?, default: "JSON_API_V1", required: false, nullable: false, emit_null: false)]
    getter payload_format : String? = "JSON_API_V1"

    # The canonical URL of this notification.
    @[JSON::Field(key: "selfLink", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter self_link : String? = nil

    # The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'
    @[JSON::Field(key: "topic", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter topic : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @custom_attributes : Hash(String, String)? = nil,
      @etag : String? = nil,
      @event_types : Array(String)? = nil,
      @id : String? = nil,
      @kind : String? = "storage#notification",
      @object_name_prefix : String? = nil,
      @payload_format : String? = "JSON_API_V1",
      @self_link : String? = nil,
      @topic : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_custom_attributes = @custom_attributes).nil?
      end
      unless (_etag = @etag).nil?
      end
      unless (_event_types = @event_types).nil?
      end
      unless (_id = @id).nil?
      end
      unless (_kind = @kind).nil?
      end
      unless (_object_name_prefix = @object_name_prefix).nil?
      end
      unless (_payload_format = @payload_format).nil?
      end
      unless (_self_link = @self_link).nil?
      end
      unless (_topic = @topic).nil?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_custom_attributes = @custom_attributes).nil?
      end

      unless (_etag = @etag).nil?
      end

      unless (_event_types = @event_types).nil?
      end

      unless (_id = @id).nil?
      end

      unless (_kind = @kind).nil?
      end

      unless (_object_name_prefix = @object_name_prefix).nil?
      end

      unless (_payload_format = @payload_format).nil?
      end

      unless (_self_link = @self_link).nil?
      end

      unless (_topic = @topic).nil?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] custom_attributes Object to be assigned
    def custom_attributes=(new_value : Hash(String, String)?)
      unless new_value.nil?
      end

      @custom_attributes = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] etag Object to be assigned
    def etag=(new_value : String?)
      unless new_value.nil?
      end

      @etag = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_types Object to be assigned
    def event_types=(new_value : Array(String)?)
      unless new_value.nil?
      end

      @event_types = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(new_value : String?)
      unless new_value.nil?
      end

      @id = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(new_value : String?)
      unless new_value.nil?
      end

      @kind = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object_name_prefix Object to be assigned
    def object_name_prefix=(new_value : String?)
      unless new_value.nil?
      end

      @object_name_prefix = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payload_format Object to be assigned
    def payload_format=(new_value : String?)
      unless new_value.nil?
      end

      @payload_format = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] self_link Object to be assigned
    def self_link=(new_value : String?)
      unless new_value.nil?
      end

      @self_link = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] topic Object to be assigned
    def topic=(new_value : String?)
      unless new_value.nil?
      end

      @topic = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@custom_attributes, @etag, @event_types, @id, @kind, @object_name_prefix, @payload_format, @self_link, @topic)
  end
end
