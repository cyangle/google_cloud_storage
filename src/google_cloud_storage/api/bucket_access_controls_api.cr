#  Cloud Storage JSON API
#
# Stores and retrieves potentially large, immutable data objects.
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/bucket_access_control"
require "../models/bucket_access_controls"

module GoogleCloudStorage
  class BucketAccessControlsApi
    property api_client : ApiClient

    delegate client_side_validation?, debugging?, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Permanently deletes the ACL entry for the specified entity on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Nil]
    def delete(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Nil
      delete_with_http_info(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      nil
    end

    # Permanently deletes the ACL entry for the specified entity on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def delete_with_http_info(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_delete(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketAccessControlsApi#delete\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Permanently deletes the ACL entry for the specified entity on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def delete(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_delete(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKET_ACCESS_CONTROLS_DELETE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_delete(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketAccessControlsApi.delete ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        raise ArgumentError.new("\"entity\" is required and cannot be null") if entity.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKET_ACCESS_CONTROLS_DELETE_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/acl/{entity}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s)).sub("{" + "entity" + "}", URI.encode_path(entity.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "BucketAccessControlsApi.storage_bucket_access_controls_delete",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns the ACL entry for the specified entity on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::BucketAccessControl]
    def get(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::BucketAccessControl
      data, _status_code, _headers = get_with_http_info(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Returns the ACL entry for the specified entity on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::BucketAccessControl, Integer, Hash)] GoogleCloudStorage::BucketAccessControl, response status code and response headers
    def get_with_http_info(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::BucketAccessControl, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_get(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketAccessControlsApi#get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::BucketAccessControl.from_json(body), status_code, headers)
    end

    # Returns the ACL entry for the specified entity on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def get(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_get(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKET_ACCESS_CONTROLS_GET_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_get(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketAccessControlsApi.get ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        raise ArgumentError.new("\"entity\" is required and cannot be null") if entity.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKET_ACCESS_CONTROLS_GET_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/acl/{entity}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s)).sub("{" + "entity" + "}", URI.encode_path(entity.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketAccessControlsApi.storage_bucket_access_controls_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Creates a new ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return [GoogleCloudStorage::BucketAccessControl]
    def insert(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : GoogleCloudStorage::BucketAccessControl
      data, _status_code, _headers = insert_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control)
      data
    end

    # Creates a new ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return [Tuple(GoogleCloudStorage::BucketAccessControl, Integer, Hash)] GoogleCloudStorage::BucketAccessControl, response status code and response headers
    def insert_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : Tuple(GoogleCloudStorage::BucketAccessControl, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_insert(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketAccessControlsApi#insert\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::BucketAccessControl.from_json(body), status_code, headers)
    end

    # Creates a new ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return nil
    def insert(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_insert(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control).execute(&block)
    end

    STORAGE_BUCKET_ACCESS_CONTROLS_INSERT_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_insert(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketAccessControlsApi.insert ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKET_ACCESS_CONTROLS_INSERT_VALID_VALUES_FOR_ALT)
        end

        unless (_bucket_access_control = bucket_access_control).nil?
          _bucket_access_control.validate if _bucket_access_control.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/acl".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bucket_access_control, content_type: header_params["Content-Type"]?) if !bucket_access_control.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "BucketAccessControlsApi.storage_bucket_access_controls_insert",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Retrieves ACL entries on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [GoogleCloudStorage::BucketAccessControls]
    def list(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : GoogleCloudStorage::BucketAccessControls
      data, _status_code, _headers = list_with_http_info(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)
      data
    end

    # Retrieves ACL entries on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return [Tuple(GoogleCloudStorage::BucketAccessControls, Integer, Hash)] GoogleCloudStorage::BucketAccessControls, response status code and response headers
    def list_with_http_info(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Tuple(GoogleCloudStorage::BucketAccessControls, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_list(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketAccessControlsApi#list\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::BucketAccessControls.from_json(body), status_code, headers)
    end

    # Retrieves ACL entries on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @return nil
    def list(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_list(bucket: bucket, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project).execute(&block)
    end

    STORAGE_BUCKET_ACCESS_CONTROLS_LIST_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_list(
      *,
      bucket : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketAccessControlsApi.list ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKET_ACCESS_CONTROLS_LIST_VALID_VALUES_FOR_ALT)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/acl".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = nil

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "BucketAccessControlsApi.storage_bucket_access_controls_list",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Patches an ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return [GoogleCloudStorage::BucketAccessControl]
    def patch(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : GoogleCloudStorage::BucketAccessControl
      data, _status_code, _headers = patch_with_http_info(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control)
      data
    end

    # Patches an ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return [Tuple(GoogleCloudStorage::BucketAccessControl, Integer, Hash)] GoogleCloudStorage::BucketAccessControl, response status code and response headers
    def patch_with_http_info(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : Tuple(GoogleCloudStorage::BucketAccessControl, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_patch(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketAccessControlsApi#patch\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::BucketAccessControl.from_json(body), status_code, headers)
    end

    # Patches an ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return nil
    def patch(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_patch(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control).execute(&block)
    end

    STORAGE_BUCKET_ACCESS_CONTROLS_PATCH_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_patch(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketAccessControlsApi.patch ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        raise ArgumentError.new("\"entity\" is required and cannot be null") if entity.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKET_ACCESS_CONTROLS_PATCH_VALID_VALUES_FOR_ALT)
        end

        unless (_bucket_access_control = bucket_access_control).nil?
          _bucket_access_control.validate if _bucket_access_control.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/acl/{entity}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s)).sub("{" + "entity" + "}", URI.encode_path(entity.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bucket_access_control, content_type: header_params["Content-Type"]?) if !bucket_access_control.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"PATCH",
        path: local_var_path,
        operation: "BucketAccessControlsApi.storage_bucket_access_controls_patch",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Updates an ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return [GoogleCloudStorage::BucketAccessControl]
    def update(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : GoogleCloudStorage::BucketAccessControl
      data, _status_code, _headers = update_with_http_info(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control)
      data
    end

    # Updates an ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return [Tuple(GoogleCloudStorage::BucketAccessControl, Integer, Hash)] GoogleCloudStorage::BucketAccessControl, response status code and response headers
    def update_with_http_info(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : Tuple(GoogleCloudStorage::BucketAccessControl, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_update(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging?
        Log.debug { "API called: BucketAccessControlsApi#update\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(GoogleCloudStorage::BucketAccessControl.from_json(body), status_code, headers)
    end

    # Updates an ACL entry on the specified bucket.
    # @required @param bucket [String?] Name of a bucket.
    # @required @param entity [String?] The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
    # @optional @param alt [String?] Data format for the response.
    # @optional @param fields [String?] Selector specifying which fields to include in a partial response.
    # @optional @param key [String?] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @optional @param oauth_token [String?] OAuth 2.0 token for the current user.
    # @optional @param pretty_print [Bool?] Returns response with indentations and line breaks.
    # @optional @param quota_user [String?] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    # @optional @param upload_type [String?] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
    # @optional @param user_ip [String?] Deprecated. Please use quotaUser instead.
    # @optional @param user_project [String?] The project to be billed for this request. Required for Requester Pays buckets.
    # @optional @param bucket_access_control [GoogleCloudStorage::BucketAccessControl?]
    # @return nil
    def update(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_update(bucket: bucket, entity: entity, alt: alt, fields: fields, key: key, oauth_token: oauth_token, pretty_print: pretty_print, quota_user: quota_user, upload_type: upload_type, user_ip: user_ip, user_project: user_project, bucket_access_control: bucket_access_control).execute(&block)
    end

    STORAGE_BUCKET_ACCESS_CONTROLS_UPDATE_VALID_VALUES_FOR_ALT = String.static_array("json", "media")

    # @return Crest::Request
    def build_api_request_for_update(
      *,
      bucket : String? = nil,
      entity : String? = nil,
      alt : String? = nil,
      fields : String? = nil,
      key : String? = nil,
      oauth_token : String? = nil,
      pretty_print : Bool? = nil,
      quota_user : String? = nil,
      upload_type : String? = nil,
      user_ip : String? = nil,
      user_project : String? = nil,
      bucket_access_control : GoogleCloudStorage::BucketAccessControl? = nil
    ) : Crest::Request
      if debugging?
        Log.debug { "Calling API: BucketAccessControlsApi.update ..." }
      end

      if client_side_validation?
        raise ArgumentError.new("\"bucket\" is required and cannot be null") if bucket.nil?

        raise ArgumentError.new("\"entity\" is required and cannot be null") if entity.nil?

        unless (_alt = alt).nil?
          OpenApi::EnumValidator.validate("alt", _alt, STORAGE_BUCKET_ACCESS_CONTROLS_UPDATE_VALID_VALUES_FOR_ALT)
        end

        unless (_bucket_access_control = bucket_access_control).nil?
          _bucket_access_control.validate if _bucket_access_control.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/storage/v1/b/{bucket}/acl/{entity}".sub("{" + "bucket" + "}", URI.encode_path(bucket.to_s)).sub("{" + "entity" + "}", URI.encode_path(entity.to_s))

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["alt"] = alt.to_s if !alt.nil?
      query_params["fields"] = fields.to_s if !fields.nil?
      query_params["key"] = key.to_s if !key.nil?
      query_params["oauth_token"] = oauth_token.to_s if !oauth_token.nil?
      query_params["prettyPrint"] = pretty_print.to_s if !pretty_print.nil?
      query_params["quotaUser"] = quota_user.to_s if !quota_user.nil?
      query_params["uploadType"] = upload_type.to_s if !upload_type.nil?
      query_params["userIp"] = user_ip.to_s if !user_ip.nil?
      query_params["userProject"] = user_project.to_s if !user_project.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: bucket_access_control, content_type: header_params["Content-Type"]?) if !bucket_access_control.nil?

      # auth_names
      auth_names = ["Oauth2c", "Oauth2"]

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "BucketAccessControlsApi.storage_bucket_access_controls_update",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
